#+ -*- mode: org; coding: utf-8;
#+TITLE: DAQ codes with CAEN Modules and Libraries

#+FILETAGS: :4job:CJPL:DAQ:
#+TAGS: code c cpp python shell
#+TAGS: root vme hv
#+SEQ_TODO: TODO | DONE
#+SEQ_TODO: REPORT BUG NOTE KNOWNCAUSE | FIXED
#+SEQ_TODO: | CANCELED FAILED TIMEOUT
#+OPTIONS: toc:2

DCML = {D}ata acquisition with {C}aen {M}odules and {L}ibraries

* Files
  + includes
    - "dcml.h"  -- common header for all
    - "experim.h" -- automatically generated MIDAS header for all
  + sources
    - "dcmlfe.c"    -- FE code
    - "dcmlana.cpp" -- online analyzer
  + others
    - "Makefile"
    - "README.org"  -- this file

* Questions about using DigitizerSDK
** Common data structures
   + ~cvt_board_data~
     - ~UINT16 m_base_address~
     - ~long   m_vme_handle~
     - ~const cvt_reg_table* m_p_reg_table~
     - ~BOOL (*set_MCST_CBLT)(void*, UINT8, MCST_CBLT_board_pos)~
   + ~cvt_reg_table~
     - ~UINT16  m_address~
     - ~UINT16  m_am~
     - ~UINT16  m_data_size~
   + ~MCST_CBLT_board_pos~
   + ~cvt_V1724_data~
     - ~cvt_board_data   m_common_data~
     - ~CVT_V17XX_TYPES  m_type~
     - ~UINT32*  m_cache_sample_buffer~        -- Cache buffer
     - ~UINT32   m_cache_sample_buffer_size~   -- Cache buffer size (BYTES)
     - ~UINT32   m_cache_sample_buffer_read_bytes~  -- Number of samples stored (BYTES)
     - ~BOOL     m_is_des_mode~

** How to initialize a V1724?
   1. Use ~CAENVME_Init()~ to get a ~vme_handle~ (*int32_t*).
   2. Use ~BOOL cvt_V1724_open(cvt_V1724_data*, UINT16, long, CVT_V17XX_TYPES)~

** How to close a V1724 board?
   1. Use ~cvt_V1724_close()~.
   2. Delete the ~p_data~ pointer.

** V1724 data readout
   1. Use ~cvt_V1724_read_data(...)~ to read data from the board's channels and
      store to internal buffer: ~p_data {m_cache_sample_*}~
      + Given parameters: ~cvt_V1724_data* p_data~, all read data are also
        stored in its internal buffer.
      + Returned data
	- ~cvt_V1724_data* p_data~  : internal buffer contains data
	- ~UINT32* p_ch_max_samples~: the maximum number of samples per
          channel read for each event
	- ~UINT32* p_num_events~: the number of events read
      + Data readout using ~cvt_FIFO_BLT_read()~ (limit buffer size to 16 MB due
        to Linux driver limits), which function invokes
        ~CAENVME_FIFOBLTReadCycle()~.
      + Data are: samples of all enabled channels are stored together.
   2. Call ~cvt_V1724_get_buffer_cache(..)~ to get cached data.
      + Given parameters:
	+ ~cvt_V1724_data* p_data~ -- pointer to board data
	+ ~UINT16  event_index~    -- The event index from which retrive data
	+ ~UINT8   ch_index~       -- The channel index, which data
      + Returned data
	+ ~UINT16* p_buff~         -- The target buffer: caller allocated
	+ ~UINT32* p_buff_size~    -- The buffer size (16-bit word).
	+ ~UINT8*  p_board_id~     -- The board id stored into event
	+ ~UINT32* p_trigger_time_tag~ -- The trigger time tag stored into event
	+ ~UINT32* p_event_counter~    -- The counter stored into event
      + Data are: samples from certain channel of certain event

** V1724 data structure in buffer?
   + Resident values
     - The VME handler: *int32_t*
     - The board data:  *cvt_V1724_data*
     - The buffer data:
       1) ~cvt_V1724_data.m_cache_sample_buffer~
       2) ~cvt_V1724_data.m_cache_sample_buffer_size~
       3) ~cvt_V1724_data.m_cache_sample_buffer_read_bytes~
     - The reformated data (after ~get_buffer_cache~)
       1) ~UINT16* p_buff~
       2) ~UINT32* p_buff_size~
       3) ~UINT8*  p_board_id~
       4) ~UINT32* p_trigger_time_tag~
       5) ~UINT32* p_event_counter~

** V1724 parameters?
*** Channel settings
    + Channel mask
    + Threshold
*** Trigger settings
*** Clock settings
*** Control settings

** V1724 Control?
   1. Write parameters
   2. Start/Stop/Reset
      - Start -- ~cvt_V1724_start_acquisition(p_data)~
      - Stop  -- ~cvt_V1724_stop_acquisition(p_data)~
      - Reset -- ~cvt_V1724_software_reset(p_data)~
   3. Check status
      - ~cvt_V1724_get_acquisition_status()~
      - ~cvt_V1724_get_channel_status()~
   4. Readout (see above)

** How to organize V1724 data in MIDAS banks?

* Configurations
** ODB basic settings
   + ~export MIDAS_DIR=`pwd`~
   + ~odbedit~
     #+BEGIN_EXAMPLE
     
     #+END_EXAMPLE

** V1724 settings

* Code

** Code convention
   1. using definitions in ~<stdint.h>~ (C99) instead of ~UINT8~ stuff.
   2. move all ~#ifdef __cplusplus~ stuff in C sources to C++ source files.
   3. all C++ code should add ~#ifdef __cplusplus~ stuff if invoking C headers.
   4. try to work without ~experim.h~ generated by odbedit.
   5. try to convert all non-standard statements to C99 and C++98 conventions.
   6. MIDAS bank types (~TID_~)
      |----------+-------+--------------------+-------+-----------------------------|
      | Macro    | Value | type               | bytes | comment                     |
      |----------+-------+--------------------+-------+-----------------------------|
      | BYTE     |     1 | unsigned byte      |     1 |                             |
      | SBYTE    |     2 | signed byte        |     1 |                             |
      | CHAR     |     3 | single character   |     1 |                             |
      | WORD     |     4 | unsigned short int |     2 |                             |
      | SHORT    |     5 | signed word        |     2 |                             |
      | DWORD    |     6 | unsigned int       |     4 |                             |
      | INT      |     7 | signed dword       |     4 |                             |
      | BOOL     |     8 | int                |     4 |                             |
      | FLOAT    |     9 | float              |     4 |                             |
      | DOUBLE   |    10 | double             |     8 |                             |
      | BITFIELD |    11 | unsigned int       |     4 | 32-bits bitfield            |
      | STRING   |    12 | char*              |     * | zero terminated string      |
      | ARRAY    |    13 | *                  |     * | array with unknown contenst |
      | STRUCT   |    14 | struct             |     * | fixed length struct         |
      | KEY      |    15 | *                  |     * | key in ODB                  |
      | LINK     |    16 | *                  |     * | link in ODB                 |
      | LAST     |    17 | *                  |     * | end of TID list             |
      |----------+-------+--------------------+-------+-----------------------------|

** Fist Implementation
   1. ODB path: */Equipment/Digitizer/Settings/*
   2. Basic Settings
      - ~Base Add : WORD~
      - ~Channel Mask: BYTE~
   3. Channel's settings ["CHi", i = 0~7]
      - ~Threshold:FLOAT~ -- mV
   4. Trigger settings: all channels are the same
      - ~Type: BYTE~ -- 1(bit0):auto; 2(bit1):external; 4(bit2):force; 
      - ~Post Trigger: INT~ 32-bit int
      - ~Edge: BYTE~ 8-bit, 0:"No Trig"; 1:"Rising"; 2:"Falling"
   5. Clock settings
      - ~PLL File: STRING~ -- Load PLL from file
   6. Readout and re-format
      * each sample of each channel is a bank, the length is fixed.
      * Bank : { string:name, word:type, word:data\_size }
      * Bank list : { char*9 :name, word:type, dword:size, char**:init_str,
        bool:output_flag, void*:addr, dword:n\_data, HNDLE:def\_key }
      * banks of channel 0
	- {"CH0S", TID\_WORD, N_SAMPLES, NULL} -- samples
	- {"CH0T", TID\_DWORD, 1, NULL} -- trigger time tag
	- {"CH0C", TID\_DWORD, 1, NULL} -- buffer size

