/////////////////////////////////////////////////////////////////////////////
// Name:        cursor_ch_control.cpp
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     12/10/2006 10:56:03
// RCS-ID:      
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 12/10/2006 10:56:03

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "cursor_ch_control.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "cursor_ch_control.h"

////@begin XPM images
////@end XPM images

/*!
 * CursorChControl type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CursorChControl, wxPanel )

/*!
 * CursorChControl event table definition
 */

BEGIN_EVENT_TABLE( CursorChControl, wxPanel )

////@begin CursorChControl event table entries
    EVT_TOGGLEBUTTON( ID_CURSOR_TOGGLEBUTTON, CursorChControl::OnCursorTogglebuttonClick )

    EVT_BUTTON( ID_CURSOR_RESET_BUTTON, CursorChControl::OnCursorResetButtonClick )

    EVT_SPIN( ID_CURSOR_POSITION_SPINBUTTON, CursorChControl::OnCursorPositionSpinbuttonUpdated )

    EVT_CHOICE( ID_CURSOR_POS_MULTIPLIER_CHOICE, CursorChControl::OnCursorPosMultiplierChoiceSelected )

////@end CursorChControl event table entries

END_EVENT_TABLE()

/*!
 * CursorChControl constructors
 */

 CursorChControl::CursorChControl( ): m_last_cursor_pos( 0)
{
}

CursorChControl::CursorChControl( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
								: m_last_cursor_pos( 0)
{
    Create(parent, id, pos, size, style);
}

/*!
 * CursorChControl creator
 */

bool CursorChControl::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CursorChControl member initialisation
    m_main_sizer_text = NULL;
    m_ch_enable_control = NULL;
    m_ch_cursor_reset_control = NULL;
    m_set_cursor_position_control = NULL;
    m_cursor_pos_multiplier_control = NULL;
    m_cursor_position_control = NULL;
    m_cursor_value_control = NULL;
    m_mV_label = NULL;
////@end CursorChControl member initialisation

////@begin CursorChControl creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CursorChControl creation
    return true;
}

/*!
 * Control creation for CursorChControl
 */

void CursorChControl::CreateControls()
{    
////@begin CursorChControl content construction
    // Generated by DialogBlocks, 17/01/2007 09:57:38 (unregistered)

    CursorChControl* itemPanel1 = this;

    m_main_sizer_text = new wxStaticBox(itemPanel1, wxID_ANY, _("???"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(m_main_sizer_text, wxHORIZONTAL);
    itemPanel1->SetSizer(itemStaticBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_VERTICAL, 2);

    m_ch_enable_control = new wxToggleButton( itemPanel1, ID_CURSOR_TOGGLEBUTTON, _("???"), wxDefaultPosition, wxSize(60, -1), 0 );
    m_ch_enable_control->SetValue(true);
    m_ch_enable_control->SetHelpText(_("Enable/Disable channel cursor"));
    if (ShowToolTips())
        m_ch_enable_control->SetToolTip(_("Enable/Disable channel cursor"));
    m_ch_enable_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemBoxSizer3->Add(m_ch_enable_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0);

    wxStaticBox* itemStaticBoxSizer5Static = new wxStaticBox(itemPanel1, wxID_ANY, _T(""));
    wxStaticBoxSizer* itemStaticBoxSizer5 = new wxStaticBoxSizer(itemStaticBoxSizer5Static, wxVERTICAL);
    itemStaticBoxSizer2->Add(itemStaticBoxSizer5, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer5->Add(itemBoxSizer6, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    m_ch_cursor_reset_control = new wxButton( itemPanel1, ID_CURSOR_RESET_BUTTON, _("0"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    m_ch_cursor_reset_control->SetHelpText(_("Reset cursor position"));
    if (ShowToolTips())
        m_ch_cursor_reset_control->SetToolTip(_("Reset cursor position"));
    m_ch_cursor_reset_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemBoxSizer6->Add(m_ch_cursor_reset_control, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 2);

    m_set_cursor_position_control = new wxSpinButton( itemPanel1, ID_CURSOR_POSITION_SPINBUTTON, wxDefaultPosition, wxDefaultSize, wxSP_HORIZONTAL );
    m_set_cursor_position_control->SetHelpText(_("Set cursor position"));
    if (ShowToolTips())
        m_set_cursor_position_control->SetToolTip(_("Set cursor position"));
    itemBoxSizer6->Add(m_set_cursor_position_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 2);

    wxString* m_cursor_pos_multiplier_controlStrings = NULL;
    m_cursor_pos_multiplier_control = new wxChoice( itemPanel1, ID_CURSOR_POS_MULTIPLIER_CHOICE, wxDefaultPosition, wxSize(70, -1), 0, m_cursor_pos_multiplier_controlStrings, 0 );
    m_cursor_pos_multiplier_control->SetHelpText(_("Set cursor position multiplier factor"));
    if (ShowToolTips())
        m_cursor_pos_multiplier_control->SetToolTip(_("Set cursor position multiplier factor"));
    itemStaticBoxSizer5->Add(m_cursor_pos_multiplier_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer2->Add(itemBoxSizer10, 1, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer10->Add(itemBoxSizer11, 0, wxALIGN_RIGHT|wxALL, 0);

    m_cursor_position_control = new wxStaticText( itemPanel1, wxID_STATIC, _("0"), wxDefaultPosition, wxSize(70, -1), 0 );
    m_cursor_position_control->SetHelpText(_("Cursor position (uSec)"));
    if (ShowToolTips())
        m_cursor_position_control->SetToolTip(_("Cursor position (uSec)"));
    m_cursor_position_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemBoxSizer11->Add(m_cursor_position_control, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    wxBoxSizer* itemBoxSizer13 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer10->Add(itemBoxSizer13, 0, wxALIGN_RIGHT|wxALL, 0);

    m_cursor_value_control = new wxStaticText( itemPanel1, wxID_STATIC, _("0"), wxDefaultPosition, wxSize(70, -1), 0 );
    m_cursor_value_control->SetHelpText(_("Signal value at cursor position (mV)"));
    if (ShowToolTips())
        m_cursor_value_control->SetToolTip(_("Signal value at cursor position (mV)"));
    m_cursor_value_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    itemBoxSizer13->Add(m_cursor_value_control, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    wxBoxSizer* itemBoxSizer15 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer2->Add(itemBoxSizer15, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer15->Add(itemBoxSizer16, 0, wxALIGN_RIGHT|wxALL, 0);

    wxStaticText* itemStaticText17 = new wxStaticText( itemPanel1, wxID_STATIC, _("uS"), wxDefaultPosition, wxSize(20, -1), 0 );
    itemBoxSizer16->Add(itemStaticText17, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

    wxBoxSizer* itemBoxSizer18 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer15->Add(itemBoxSizer18, 0, wxALIGN_RIGHT|wxALL, 0);

    m_mV_label = new wxStaticText( itemPanel1, wxID_STATIC, _("mV"), wxDefaultPosition, wxSize(20, -1), 0 );
    itemBoxSizer18->Add(m_mV_label, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 2);

////@end CursorChControl content construction
	this->m_set_cursor_position_control->SetRange( -9999999, 9999999);

	this->m_cursor_pos_multiplier_control->Append( _("x   1"));
	this->m_cursor_pos_multiplier_control->Append( _("x  10"));
	this->m_cursor_pos_multiplier_control->Append( _("x 100"));
	this->m_cursor_pos_multiplier_control->Append( _("x1000"));

	this->m_cursor_pos_multiplier_control->SetSelection( 0);
}

/*!
 * Should we show tooltips?
 */

bool CursorChControl::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CursorChControl::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CursorChControl bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CursorChControl bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CursorChControl::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CursorChControl icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CursorChControl icon retrieval
}
/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TOGGLEBUTTON
 */

void CursorChControl::OnCursorTogglebuttonClick( wxCommandEvent& /* event*/ )
{
	this->m_p_board_channel->m_cursor_enabled[ this->m_scope_index]= this->m_ch_enable_control->GetValue( )!= 0;
	this->m_ch_enable_control->SetLabel( this->m_ch_enable_control->GetValue( )? _("Disable"): _("Enable"));
	(this->m_p_board_channel->ScopeRefresh)( this->m_scope_index, true);
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON1
 */

void CursorChControl::OnCursorResetButtonClick( wxCommandEvent& /*event*/ )
{
	this->m_last_cursor_pos= 0;
	this->m_set_cursor_position_control->SetValue( this->m_last_cursor_pos);
	this->UpdateCursorPosition( 0);
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINBUTTON1
 */

void CursorChControl::OnCursorPositionSpinbuttonUpdated( wxSpinEvent& /*event*/ )
{
	int new_pos= this->m_set_cursor_position_control->GetValue( );
	this->m_last_cursor_pos+= ( new_pos- this->m_last_cursor_pos)* this->GetCursorMultipler();
	this->m_set_cursor_position_control->SetValue( this->m_last_cursor_pos);

	this->UpdateCursorPosition( this->m_set_cursor_position_control->GetValue( ));
}

bool CursorChControl::SetupBoard( GenericBoard* p_board, int ch_index, int ch_count, int scope_index, bool is_virtual)
{
	this->m_is_virtual= is_virtual;
	this->m_p_board= p_board;
	this->m_ch_index= ch_index;
	this->m_ch_count= ch_count;
	this->m_scope_index= scope_index;
	if( this->m_is_virtual)
	{
		this->m_mV_label->SetLabel( _("  "));
		if( ( size_t)this->m_ch_index>= this->m_p_board->m_virtual_channel_array.GetCount())
			return false;
		this->m_p_board_channel= (GenericBoardChannel*)this->m_p_board->m_virtual_channel_array[ this->m_ch_index];
	}
	else
	{
		if( ( size_t)this->m_ch_index>= this->m_p_board->m_channel_array.GetCount())
			return false;
		this->m_p_board_channel= (GenericBoardChannel*)this->m_p_board->m_channel_array[ this->m_ch_index];
	}

	this->m_p_board_channel->m_p_cursor_ch_control[ scope_index]= this;
	
	if( !this->UpdateControls())
		return false;
	return true;
}
bool CursorChControl::UpdateControls( )
{
	if( this->m_is_virtual)
	{
	  this->m_main_sizer_text->SetLabel( wxString::Format(_("VIRT %d"), this->m_ch_count));
	}
	else
	{
	  this->m_main_sizer_text->SetLabel( wxString::Format(_("%d"), this->m_ch_count));
	}
	this->m_ch_enable_control->SetValue( this->m_p_board_channel->m_cursor_enabled[ this->m_scope_index]);
	this->m_ch_enable_control->SetLabel( this->m_ch_enable_control->GetValue( )? _("Disable"): _("Enable"));

	return true;
}
int CursorChControl::GetCursorMultipler( void)
{
	const int MULTIPLIER_TABLE[]=
	{
		1,
		10,
		100,
		1000
	};
	int multiplier= 100;
	if( this->m_cursor_pos_multiplier_control->GetSelection()< ( sizeof( MULTIPLIER_TABLE)/ sizeof( MULTIPLIER_TABLE[0])))
	{
		multiplier= MULTIPLIER_TABLE[ this->m_cursor_pos_multiplier_control->GetSelection()];
	}
	return multiplier;
}
bool CursorChControl::UpdateCursorPosition( int cursor_position)
{
	this->m_p_board_channel->m_cursor_position[ this->m_scope_index]= cursor_position;
	(this->m_p_board_channel->ScopeRefresh)( this->m_scope_index, true);

	double position_usec= this->m_p_board_channel->Sample2Sec( this->m_p_board_channel->m_cursor_position[ this->m_scope_index])* 1000000.0;
	this->m_cursor_position_control->SetLabel( wxString::Format(_("%.3f"), position_usec));
	return true;
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_CURSOR_POS_MULTIPLIER_CHOICE
 */

void CursorChControl::OnCursorPosMultiplierChoiceSelected( wxCommandEvent& /*event*/ )
{
	// this->UpdateCursorPosition( this->m_set_cursor_position_control->GetValue( ));
}

void CursorChControl::SetEnable( bool enable)
{
    this->m_main_sizer_text->Enable( enable);
    this->m_ch_enable_control->Enable( enable);
    this->m_ch_cursor_reset_control->Enable( enable);
    this->m_set_cursor_position_control->Enable( enable);
    this->m_cursor_pos_multiplier_control->Enable( enable);
    this->m_cursor_position_control->Enable( enable);
    this->m_cursor_value_control->Enable( enable);
    this->m_mV_label->Enable( enable);
}

