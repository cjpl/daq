/////////////////////////////////////////////////////////////////////////////
// Name:        drawing_panel.cpp
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     06/04/2006 16:00:41
// RCS-ID:      
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 06/04/2006 16:00:41

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "drawing_panel.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif
#include <wx/thread.h>

////@begin includes
////@end includes

#include "drawing_panel.h"

////@begin XPM images
////@end XPM images

/*!
 * DrawingPanel type definition
 */

IMPLEMENT_DYNAMIC_CLASS( DrawingPanel, wxPanel )

/*!
 * DrawingPanel event table definition
 */

BEGIN_EVENT_TABLE( DrawingPanel, wxPanel )

////@begin DrawingPanel event table entries
    EVT_SIZE( DrawingPanel::OnSize )
    EVT_PAINT( DrawingPanel::OnPaint )
    EVT_ERASE_BACKGROUND( DrawingPanel::OnEraseBackground )

////@end DrawingPanel event table entries

END_EVENT_TABLE()

/*!
 * DrawingPanel constructors
 */

DrawingPanel::DrawingPanel( ): m_app_settings( NULL), m_freezed(false), m_mutex( wxMUTEX_RECURSIVE), m_scope_index( 0)
{
}

DrawingPanel::DrawingPanel( int scope_index, wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style ): 
							m_app_settings( NULL), m_freezed(false), m_mutex( wxMUTEX_RECURSIVE)
{
	this->m_scope_index= scope_index;
    Create( parent, id, pos, size, style);
}

 DrawingPanel::~DrawingPanel( )
 {
 }
/*!
 * DrawingPanel creator
 */

bool DrawingPanel::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{
////@begin DrawingPanel member initialisation
////@end DrawingPanel member initialisation
    m_draw_left_canvas = NULL;
    m_draw_canvas = NULL;

////@begin DrawingPanel creation
    wxPanel::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end DrawingPanel creation

    return true;
}

/*!
 * Control creation for DrawingPanel
 */

void DrawingPanel::CreateControls()
{    
////@begin DrawingPanel content construction
    // Generated by DialogBlocks, 10/10/2006 17:17:46 (unregistered)

    DrawingPanel* itemPanel1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    itemPanel1->SetSizer(itemBoxSizer2);

////@end DrawingPanel content construction
	m_draw_left_canvas = new DrawingLeftCanvas( this->m_scope_index, itemPanel1, ID_LEFT_PANEL, wxDefaultPosition, wxSize(20, -1), wxSTATIC_BORDER|wxTAB_TRAVERSAL );
    itemBoxSizer2->Add(m_draw_left_canvas, 0, wxGROW|wxLEFT|wxTOP|wxBOTTOM, 2);

    m_draw_canvas = new DrawingCanvas( this->m_scope_index, itemPanel1, ID_DRAW_PANEL, wxDefaultPosition, wxDefaultSize, wxSTATIC_BORDER|wxTAB_TRAVERSAL );
    itemBoxSizer2->Add(m_draw_canvas, 1, wxGROW|wxRIGHT|wxTOP|wxBOTTOM, 2);

}

/*!
 * Should we show tooltips?
 */

bool DrawingPanel::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap DrawingPanel::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin DrawingPanel bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end DrawingPanel bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon DrawingPanel::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin DrawingPanel icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end DrawingPanel icon retrieval
}
/*!
 * wxEVT_PAINT event handler for ID_DRAW_CANVAS_PANEL
 */

void DrawingPanel::OnPaint( wxPaintEvent& event)
{
	event.Skip();
}
/*!
 * wxEVT_ERASE_BACKGROUND event handler for ID_DRAW_CANVAS_PANEL
 */

void DrawingPanel::OnEraseBackground( wxEraseEvent& event )
{
	event.Skip();
}

/*!
 * wxEVT_SIZE event handler for ID_MYDIALOG
 */

void DrawingPanel::OnSize( wxSizeEvent& event )
{
    event.Skip();
}
void DrawingPanel:: Freeze( void)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);
	this->m_freezed= true;

}
void DrawingPanel:: RefreshBackBitmap( void)
{
	this->m_draw_canvas->RefreshBackBitmap();
}

void DrawingPanel:: RefreshLeftBackBitmap( void)
{
	this->m_draw_left_canvas->RefreshBackBitmap();
}
