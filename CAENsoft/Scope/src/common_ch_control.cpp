/////////////////////////////////////////////////////////////////////////////
// Name:        common_ch_control.cpp
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     04/04/2006 14:30:53
// RCS-ID:      
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 04/04/2006 14:30:53

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "common_ch_control.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "common_ch_control.h"

////@begin XPM images
////@end XPM images

/*!
 * CommonChControl type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CommonChControl, CommonChControlBase )

/*!
 * CommonChControl event table definition
 */

BEGIN_EVENT_TABLE( CommonChControl, CommonChControlBase )

////@begin CommonChControl event table entries
    EVT_TOGGLEBUTTON( ID_ENABLE_TOGGLEBUTTON, CommonChControl::OnEnableTogglebuttonClick )

    EVT_BUTTON( ID_BUTTON, CommonChControl::OnButtonClick )

    EVT_SPIN( ID_SPINBUTTON, CommonChControl::OnSpinbuttonUpdated )

////@end CommonChControl event table entries

END_EVENT_TABLE()

/*!
 * CommonChControl constructors
 */

 CommonChControl::CommonChControl( ): 
								m_p_board(NULL), m_p_board_channel(NULL), m_ch_index(0), m_ch_count(0)
{
}

CommonChControl::CommonChControl( wxWindow* parent, bool show_dac, wxWindowID id, const wxPoint& pos, const wxSize& size, long style ): 
								m_p_board(NULL), m_p_board_channel(NULL), m_ch_index(0), m_ch_count(0), m_show_dac( show_dac)
{
    Create(parent, id, pos, size, style);
}

/*!
 * CommonChControl creator
 */

bool CommonChControl::Create( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style )
{

////@begin CommonChControl member initialisation
    m_main_sizer_text = NULL;
    m_ch_enable_control = NULL;
    m_DAC_sizer = NULL;
    m_ch_DAC_reset_control = NULL;
    m_ch_DAC_control = NULL;
    m_medium_value_control = NULL;
    m_overload_control = NULL;
////@end CommonChControl member initialisation

////@begin CommonChControl creation
    CommonChControlBase::Create( parent, id, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CommonChControl creation
    return true;
}

/*!
 * Control creation for CommonChControl
 */

void CommonChControl::CreateControls()
{    
////@begin CommonChControl content construction
    // Generated by DialogBlocks, 19/05/2008 15:55:23 (unregistered)

    CommonChControl* itemCommonChControlBase1 = this;

    this->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Verdana")));
    m_main_sizer_text = new wxStaticBox(itemCommonChControlBase1, wxID_ANY, _("???"));
    wxStaticBoxSizer* itemStaticBoxSizer2 = new wxStaticBoxSizer(m_main_sizer_text, wxVERTICAL);
    itemCommonChControlBase1->SetSizer(itemStaticBoxSizer2);

    m_ch_enable_control = new wxToggleButton( itemCommonChControlBase1, ID_ENABLE_TOGGLEBUTTON, _("???"), wxDefaultPosition, wxSize(65, -1), 0 );
    m_ch_enable_control->SetValue(true);
    m_ch_enable_control->SetHelpText(_("Enable/Disable channel"));
    if (ShowToolTips())
        m_ch_enable_control->SetToolTip(_("Enable/Disable channel"));
    m_ch_enable_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Verdana")));
    itemStaticBoxSizer2->Add(m_ch_enable_control, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0);

    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(itemCommonChControlBase1, wxID_ANY, _T(""));
    m_DAC_sizer = new wxStaticBoxSizer(itemStaticBoxSizer4Static, wxHORIZONTAL);
    itemStaticBoxSizer2->Add(m_DAC_sizer, 0, wxALIGN_CENTER_HORIZONTAL, 2);

    m_ch_DAC_reset_control = new wxButton( itemCommonChControlBase1, ID_BUTTON, _("0"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT );
    m_ch_DAC_reset_control->SetHelpText(_("Reset channel DAC offset"));
    if (ShowToolTips())
        m_ch_DAC_reset_control->SetToolTip(_("Reset channel DAC offset"));
    m_ch_DAC_reset_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Tahoma")));
    m_DAC_sizer->Add(m_ch_DAC_reset_control, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);

    m_ch_DAC_control = new wxSpinButton( itemCommonChControlBase1, ID_SPINBUTTON, wxDefaultPosition, wxDefaultSize, wxSP_VERTICAL );
    m_ch_DAC_control->SetHelpText(_("Set channel DAC offset"));
    if (ShowToolTips())
        m_ch_DAC_control->SetToolTip(_("Set channel DAC offset"));
    m_DAC_sizer->Add(m_ch_DAC_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 2);

    m_medium_value_control = new wxStaticText( itemCommonChControlBase1, wxID_STATIC, _("0"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    m_medium_value_control->SetHelpText(_("The samples' medium value"));
    if (ShowToolTips())
        m_medium_value_control->SetToolTip(_("The samples' medium value"));
    itemStaticBoxSizer2->Add(m_medium_value_control, 0, wxGROW|wxALL|wxADJUST_MINSIZE, 5);

    m_overload_control = new wxStaticText( itemCommonChControlBase1, wxID_STATIC, _T(""), wxDefaultPosition, wxSize(15, -1), wxSTATIC_BORDER );
    m_overload_control->SetHelpText(_("Channel overload status"));
    if (ShowToolTips())
        m_overload_control->SetToolTip(_("Channel overload status"));
    m_overload_control->SetBackgroundColour(wxColour(0, 255, 0));
    itemStaticBoxSizer2->Add(m_overload_control, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);

////@end CommonChControl content construction
	this->m_ch_DAC_control->SetRange( -0x8000, 0x7fff);

	this->m_DAC_sizer->Show( this->m_show_dac);
}

/*!
 * Should we show tooltips?
 */

bool CommonChControl::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CommonChControl::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CommonChControl bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CommonChControl bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CommonChControl::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CommonChControl icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CommonChControl icon retrieval
}
bool CommonChControl::SetupBoard( GenericBoard* p_board, int ch_index, int ch_count)
{
	this->m_p_board= p_board;
	this->m_ch_index= ch_index;
	this->m_ch_count= ch_count;
	if( ( size_t)this->m_ch_index>= this->m_p_board->m_channel_array.GetCount())
		return false;
	this->m_p_board_channel= (PhysicalBoardChannel*)this->m_p_board->m_channel_array[ this->m_ch_index];
	this->m_p_board_channel->m_p_common_ch_control= this;

	if( !this->UpdateControls())
		return false;
	return true;
}
bool CommonChControl::UpdateControls( )
{
	this->m_main_sizer_text->SetLabel( wxString::Format( "%d", this->m_ch_count));
	this->m_ch_enable_control->SetValue( this->m_p_board_channel->m_enabled);
	this->m_ch_enable_control->SetLabel( this->m_ch_enable_control->GetValue( )? _("Disable"): _("Enable"));
	this->m_ch_DAC_control->SetValue( (int)(double)( this->m_p_board_channel->m_DAC_offset_bit));
	this->UpdateDAC();

	return true;
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_ENABLE_TOGGLEBUTTON
 */

void CommonChControl::OnEnableTogglebuttonClick( wxCommandEvent& /* event*/ )
{
	this->m_p_board_channel->m_enabled= this->m_ch_enable_control->GetValue( )!= 0;
	this->m_ch_enable_control->SetLabel( this->m_ch_enable_control->GetValue( )? _("Disable"): _("Enable"));
	this->m_p_board->WriteTriggerMode( this->m_p_board->IsRunning());
	this->m_p_board_channel->WriteChannelTrigger();
	for( int i= 0; i< SCOPE_NUM_PANELS; i++)
	{
		(this->m_p_board_channel->ScopeRefresh)( i, true);
	}
}

void CommonChControl::UpdateDAC( void)
{
	this->m_p_board_channel->m_DAC_offset_bit= this->m_ch_DAC_control->GetValue( );
	this->m_p_board_channel->WriteDACOffset( );
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */

void CommonChControl::OnButtonClick( wxCommandEvent& /* event*/)
{
	this->m_ch_DAC_control->SetValue( 0);
	this->UpdateDAC();
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_SPINBUTTON
 */

void CommonChControl::OnSpinbuttonUpdated( wxSpinEvent& /* event*/ )
{
	this->UpdateDAC();
}

void CommonChControl::SetMediumLabel( double value)
{
	this->m_medium_value_control->SetLabel( wxString::Format( "%.3f", value));
}
void CommonChControl::SetEnable( bool enable, bool disable_all)
{
	if( disable_all)
	{
		this->m_ch_enable_control->Enable( false);
		this->m_ch_DAC_control->Enable( false);
		this->m_ch_DAC_reset_control->Enable( false);
	}
	else
	{
		this->m_ch_enable_control->Enable( enable);
		this->m_ch_DAC_control->Enable( true);
		this->m_ch_DAC_reset_control->Enable( true);
	}
}

void CommonChControl::SetOverloadBackground( const wxColor& color)
{
	this->m_overload_control->SetBackgroundColour( color);
	this->m_overload_control->Refresh();
}
