/////////////////////////////////////////////////////////////////////////////
// Name:        mainframe.h
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     04/03/06 14:18:40
// RCS-ID:      
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 04/03/06 14:18:40

#ifndef _MAINFRAME_H_
#define _MAINFRAME_H_

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma interface "mainframe.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/frame.h"
#include "wx/laywin.h"
#include "wx/notebook.h"
#include "wx/tglbtn.h"
#include "wx/spinbutt.h"
#include "wx/spinctrl.h"
#include "wx/splitter.h"
#include "wx/toolbar.h"
#include "wx/statusbr.h"
////@end includes


#include "appsettings.h"

/*!
 * Forward declarations
 */

////@begin forward declarations
class wxSashLayoutWindow;
class wxNotebook;
class wxBoxSizer;
class wxToggleButton;
class wxSpinButton;
class wxSpinCtrl;
class wxSplitterWindow;
class wxStatusBar;
////@end forward declarations

class DrawingPanel;
class CursorChControl;
/*!
 * Control identifiers
 */
#define ID_DRAWING_PANEL 30000

////@begin control identifiers
#define ID_MAIN_FRAME 10000
#define SYMBOL_MAINFRAME_STYLE wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxMAXIMIZE|wxMINIMIZE_BOX|wxMAXIMIZE_BOX|wxCLOSE_BOX
#define SYMBOL_MAINFRAME_TITLE _("CAEN SCOPE")
#define SYMBOL_MAINFRAME_IDNAME ID_MAIN_FRAME
#define SYMBOL_MAINFRAME_SIZE wxSize(1024, 768)
#define SYMBOL_MAINFRAME_POSITION wxDefaultPosition
#define ID_SASHLAYOUTWINDOW2 10014
#define ID_BOTTOM_NOTEBOOK 10008
#define ID_COMMON_SCROLLEDWINDOW 10009
#define ID_COMMON_RUN_TOGGLEBUTTON 10004
#define ID_SAMPLES_READY_PANEL 10026
#define ID_FRONT_PANEL_NIM_TOGGLEBUTTON 10039
#define ID_SIZE_X_CHOICE 10034
#define ID_MAIN_DAC_RESET_BUTTON 10074
#define ID_MAIN_DAC_OFFSET_SPINBUTTON 10078
#define ID_TRIGGER_SCROLLEDWINDOW 10003
#define ID_TRIGGER_EXT_TOGGLEBUTTON 10020
#define ID_TRIGGER_AUTO_TOGGLEBUTTON 10021
#define ID_TRIGGER_FORCE_BUTTON 10015
#define ID_TRIGGER_POST_SPINCTRL 10016
#define ID_TRIGGER_POSITION_KEEP_CHECKBOX 10038
#define ID_TRIGGER_EDGE_CHOICE 10037
#define ID_RECORD_SCROLLEDWINDOW 10027
#define ID_RECORDTOGGLEBUTTON 10029
#define ID_RECORD_MAX_BUFFERS_CHECKBOX 10028
#define ID_RECORD_MAX_BUFFERS_SPINCTRL 10035
#define ID_RECORDDIRTEXTCTRL 10030
#define ID_RECORDDIRBUTTON 10031
#define ID_SASHLAYOUTWINDOW 10011
#define ID_LEFT_NOTEBOOK 10042
#define ID_SCOPE_1_VIEW_NOTEBOOK 10042
#define ID_VIEW_1_SCROLLEDWINDOW 10006
#define ID_PANEL 10007
#define ID_BACK_CHOOSE_COLOR_1_BUTTON 10025
#define ID_SEC_PER_DIV_1_CHOICE 10005
#define ID_OFFSET_SEC_1_SPINCTRL 10033
#define ID_GRID_COLOR_1_PANEL 10019
#define ID_GRID_CHOOSE_COLOR_1_BUTTON 10022
#define ID_GRID_LINE_WIDTH_1_SPINCTRL 10023
#define ID_GRID_LINE_TYPE_1_CHOICE 10024
#define ID_CURSOR_1_SCROLLEDWINDOW 10036
#define ID_SCOPE_2_VIEW_NOTEBOOK 10100
#define ID_VIEW_2_SCROLLEDWINDOW 10043
#define ID_PANEL6 10045
#define ID_BACK_CHOOSE_COLOR_2_BUTTON 10048
#define ID_SEC_PER_DIV_2_CHOICE 10049
#define ID_OFFSET_SEC_2_SPINCTRL 10050
#define ID_GRID_COLOR_2_PANEL 10051
#define ID_GRID_CHOOSE_COLOR_2_BUTTON 10052
#define ID_GRID_LINE_WIDTH_2_SPINCTRL 10053
#define ID_GRID_LINE_TYPE_2_CHOICE 10054
#define ID_CURSOR_2_SCROLLEDWINDOW 10055
#define ID_SCOPE_3_VIEW_NOTEBOOK 10056
#define ID_VIEW_3_SCROLLEDWINDOW 10057
#define ID_PANEL3 10058
#define ID_BACK_CHOOSE_COLOR_3_BUTTON 10059
#define ID_SEC_PER_DIV_3_CHOICE 10060
#define ID_OFFSET_SEC_3_SPINCTRL 10061
#define ID_GRID_COLOR_3_PANEL 10062
#define ID_GRID_CHOOSE_COLOR_3_BUTTON 10063
#define ID_GRID_LINE_WIDTH_3_SPINCTRL 10064
#define ID_GRID_LINE_TYPE_3_CHOICE 10065
#define ID_CURSOR_3_SCROLLEDWINDOW 10066
#define ID_SCOPE_4_VIEW_NOTEBOOK 10067
#define ID_VIEW_4_SCROLLEDWINDOW 10068
#define ID_PANEL5 10069
#define ID_BACK_CHOOSE_COLOR_4_BUTTON 10070
#define ID_SEC_PER_DIV_4_CHOICE 10071
#define ID_OFFSET_SEC_4_SPINCTRL 10072
#define ID_GRID_COLOR_4_PANEL 10073
#define ID_GRID_CHOOSE_COLOR_4_BUTTON 10101
#define ID_GRID_LINE_WIDTH_4_SPINCTRL 10075
#define ID_GRID_LINE_TYPE_4_CHOICE 10076
#define ID_CURSOR_4_SCROLLEDWINDOW 10077
#define ID_SASHLAYOUTWINDOW1 10012
#define ID_SCOPE_NOTEBOOK 10013
#define ID_SCOPE_HORIZ_SPLITTERWINDOW 10040
#define ID_MAIN_TOOLBAR 10001
#define ID_EXIT_TOOL 10010
#define ID_VIEW_LEFT_TOOL 10018
#define ID_VIEW_BOTTOM_TOOL 10017
#define ID_VIEW_SCOPE_LEFT_TOP_TOOL 10041
#define ID_VIEW_SCOPE_RIGHT_TOP_TOOL 10044
#define ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL 10046
#define ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL 10047
#define ID_HELP_TOOL 10032
#define ID_MAIN_STATUSBAR 10002
////@end control identifiers

#define ID_SCOPE_VERT_TOP_SPLITTERWINDOW		20000
#define ID_SCOPE_VERT_BOTTOM_SPLITTERWINDOW		20001

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

/*!
 * MainFrame class declaration
 */

class MainFrame: public wxFrame
{    
    DECLARE_CLASS( MainFrame )
    DECLARE_EVENT_TABLE()

public:

    /// Constructors
    MainFrame( );
    MainFrame( wxWindow* parent, wxWindowID id = SYMBOL_MAINFRAME_IDNAME, const wxString& caption = SYMBOL_MAINFRAME_TITLE, const wxPoint& pos = SYMBOL_MAINFRAME_POSITION, const wxSize& size = SYMBOL_MAINFRAME_SIZE, long style = SYMBOL_MAINFRAME_STYLE);
    virtual ~MainFrame( );

    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_MAINFRAME_IDNAME, const wxString& caption = SYMBOL_MAINFRAME_TITLE, const wxPoint& pos = SYMBOL_MAINFRAME_POSITION, const wxSize& size = SYMBOL_MAINFRAME_SIZE, long style = SYMBOL_MAINFRAME_STYLE);

    /// Creates the controls and sizers
    void CreateControls();

////@begin MainFrame event handler declarations

    /// wxEVT_CLOSE_WINDOW event handler for ID_MAIN_FRAME
    void OnCloseWindow( wxCloseEvent& event );

    /// wxEVT_SIZE event handler for ID_MAIN_FRAME
    void OnSize( wxSizeEvent& event );

    /// wxEVT_SASH_DRAGGED event handler for ID_SASHLAYOUTWINDOW2
    void OnBottomWindowSashDragged( wxSashEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_COMMON_RUN_TOGGLEBUTTON
    void OnCommonRunTogglebuttonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_FRONT_PANEL_NIM_TOGGLEBUTTON
    void OnFrontPanelNimTogglebuttonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_SIZE_X_CHOICE
    void OnSizeXChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_MAIN_DAC_RESET_BUTTON
    void OnMainDacResetButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_MAIN_DAC_OFFSET_SPINBUTTON
    void OnMainDacOffsetSpinbuttonUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRIGGER_EXT_TOGGLEBUTTON
    void OnTriggerExtTogglebuttonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRIGGER_AUTO_TOGGLEBUTTON
    void OnTriggerAutoTogglebuttonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_TRIGGER_FORCE_BUTTON
    void OnTriggerForceButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_TRIGGER_POST_SPINCTRL
    void OnTriggerPostSpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_TRIGGER_POSITION_KEEP_CHECKBOX
    void OnTriggerPositionKeepCheckboxClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_TRIGGER_EDGE_CHOICE
    void OnTriggerEdgeChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_RECORDTOGGLEBUTTON
    void OnRecordtogglebuttonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_RECORD_MAX_BUFFERS_CHECKBOX
    void OnRecordMaxBuffersCheckboxClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_TEXT_UPDATED event handler for ID_RECORDDIRTEXTCTRL
    void OnRecorddirtextctrlUpdated( wxCommandEvent& event );

    /// wxEVT_COMMAND_TEXT_ENTER event handler for ID_RECORDDIRTEXTCTRL
    void OnRecorddirtextctrlEnter( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_RECORDDIRBUTTON
    void OnRecorddirbuttonClick( wxCommandEvent& event );

    /// wxEVT_SASH_DRAGGED event handler for ID_SASHLAYOUTWINDOW
    void OnLeftWindowSashDragged( wxSashEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BACK_CHOOSE_COLOR_1_BUTTON
    void OnBackChooseColor1ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_SEC_PER_DIV_1_CHOICE
    void OnSecPerDiv1ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_OFFSET_SEC_1_SPINCTRL
    void OnOffsetSec1SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_GRID_CHOOSE_COLOR_1_BUTTON
    void OnGridChooseColor1ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_GRID_LINE_WIDTH_1_SPINCTRL
    void OnGridLineWidth1SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_GRID_LINE_TYPE_1_CHOICE
    void OnGridLineType1ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BACK_CHOOSE_COLOR_2_BUTTON
    void OnBackChooseColor2ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_SEC_PER_DIV_2_CHOICE
    void OnSecPerDiv2ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_OFFSET_SEC_2_SPINCTRL
    void OnOffsetSec2SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_GRID_CHOOSE_COLOR_2_BUTTON
    void OnGridChooseColor2ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_GRID_LINE_WIDTH_2_SPINCTRL
    void OnGridLineWidth2SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_GRID_LINE_TYPE_2_CHOICE
    void OnGridLineType2ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BACK_CHOOSE_COLOR_3_BUTTON
    void OnBackChooseColor3ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_SEC_PER_DIV_3_CHOICE
    void OnSecPerDiv3ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_OFFSET_SEC_3_SPINCTRL
    void OnOffsetSec3SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_GRID_CHOOSE_COLOR_3_BUTTON
    void OnGridChooseColor3ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_GRID_LINE_WIDTH_3_SPINCTRL
    void OnGridLineWidth3SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_GRID_LINE_TYPE_3_CHOICE
    void OnGridLineType3ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BACK_CHOOSE_COLOR_4_BUTTON
    void OnBackChooseColor4ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_SEC_PER_DIV_4_CHOICE
    void OnSecPerDiv4ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_OFFSET_SEC_4_SPINCTRL
    void OnOffsetSec4SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_GRID_CHOOSE_COLOR_4_BUTTON
    void OnGridChooseColor4ButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_GRID_LINE_WIDTH_4_SPINCTRL
    void OnGridLineWidth4SpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_GRID_LINE_TYPE_4_CHOICE
    void OnGridLineType4ChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED event handler for ID_SCOPE_HORIZ_SPLITTERWINDOW
    void OnScopeHorizSplitterwindowSashPosChanged( wxSplitterEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_EXIT_TOOL
    void OnExitToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_LEFT_TOOL
    void OnViewLeftToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_BOTTOM_TOOL
    void OnViewBottomToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_SCOPE_LEFT_TOP_TOOL
    void OnViewScopeLeftTopToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_SCOPE_RIGHT_TOP_TOOL
    void OnViewScopeRightTopToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_SCOPE_LEFT_BOTTOM_TOOL
    void OnViewScopeLeftBottomToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_VIEW_SCOPE_RIGHT_BOTTOM_TOOL
    void OnViewScopeRightBottomToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_HELP_TOOL
    void OnHelpToolClick( wxCommandEvent& event );

////@end MainFrame event handler declarations

    void OnGridLineWidth4SpinctrlTextUpdated( wxCommandEvent& event );
    void OnOffsetSec4SpinctrlTextUpdated( wxCommandEvent& event );
    void OnGridLineWidth3SpinctrlTextUpdated( wxCommandEvent& event );
    void OnOffsetSec3SpinctrlTextUpdated( wxCommandEvent& event );
    void OnGridLineWidth2SpinctrlTextUpdated( wxCommandEvent& event );
    void OnOffsetSec2SpinctrlTextUpdated( wxCommandEvent& event );
    void OnGridLineWidth1SpinctrlTextUpdated( wxCommandEvent& event );
	void OnOffsetSec1SpinctrlTextUpdated( wxCommandEvent& event );
    void OnTriggerPostSpinctrlTextUpdated( wxCommandEvent& event );
	void OnScopeVertTopSplitterwindowSashPosChanged ( wxSplitterEvent& event);
	void OnScopeVertBottomSplitterwindowSashPosChanged( wxSplitterEvent& event);
    void OnRecordEnd( wxCommandEvent& event );

////@begin MainFrame member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end MainFrame member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

////@begin MainFrame member variables
    wxSashLayoutWindow* m_bottom_pane;
    wxNotebook* m_common_settings_notebook;
    wxScrolledWindow* m_common_panel;
    wxBoxSizer* m_common_main_sizer;
    wxToggleButton* m_common_run_control;
    wxPanel* m_samples_ready_control;
    wxToggleButton* m_common_TTL_control;
    wxChoice* m_size_X_control;
    wxStaticBoxSizer* m_DAC_sizer;
    wxButton* m_ch_DAC_reset_control;
    wxSpinButton* m_ch_DAC_control;
    wxStaticText* m_DAC_offset_label;
    wxScrolledWindow* m_trigger_panel;
    wxBoxSizer* m_trigger_main_sizer;
    wxToggleButton* m_trigger_ext_control;
    wxToggleButton* m_trigger_auto_control;
    wxButton* m_force_trigger_control;
    wxSpinCtrl* m_trigger_post_control;
    wxCheckBox* m_trigger_position_keep_control;
    wxChoice* m_trigger_edge_control;
    wxStaticBoxSizer* m_trigger_channel_sizer;
    wxScrolledWindow* m_record_panel;
    wxBoxSizer* m_record_main_sizer;
    wxToggleButton* m_record_start_stop_control;
    wxCheckBox* m_record_max_buffers_check_box;
    wxSpinCtrl* m_record_max_buffers_control;
    wxBoxSizer* m_record_folder_sizer;
    wxTextCtrl* m_record_dir_control;
    wxButton* m_record_dir_browse_button;
    wxSashLayoutWindow* m_left_pane;
    wxNotebook* m_specific_settings_notebook;
    wxNotebook* m_specific_settings_scope_1_notebook;
    wxScrolledWindow* m_view_scope_1_panel;
    wxBoxSizer* m_view_1_main_sizer;
    wxPanel* m_back_color_1_control;
    wxStaticBox* m_main_sizer_1_text;
    wxChoice* m_sec_per_div_1_control;
    wxSpinCtrl* m_offset_sec_1_control;
    wxPanel* m_grid_color_1_control;
    wxSpinCtrl* m_grid_line_width_1_control;
    wxChoice* m_grid_line_type_1_control;
    wxScrolledWindow* m_cursor_1_panel;
    wxBoxSizer* m_cursor_1_main_sizer;
    wxNotebook* m_specific_settings_scope_2_notebook;
    wxScrolledWindow* m_view_scope_2_panel;
    wxBoxSizer* m_view_2_main_sizer;
    wxPanel* m_back_color_2_control;
    wxStaticBox* m_main_sizer_2_text;
    wxChoice* m_sec_per_div_2_control;
    wxSpinCtrl* m_offset_sec_2_control;
    wxPanel* m_grid_color_2_control;
    wxSpinCtrl* m_grid_line_width_2_control;
    wxChoice* m_grid_line_type_2_control;
    wxScrolledWindow* m_cursor_2_panel;
    wxBoxSizer* m_cursor_2_main_sizer;
    wxNotebook* m_specific_settings_scope_3_notebook;
    wxScrolledWindow* m_view_scope_3_panel;
    wxBoxSizer* m_view_3_main_sizer;
    wxPanel* m_back_color_3_control;
    wxStaticBox* m_main_sizer_3_text;
    wxChoice* m_sec_per_div_3_control;
    wxSpinCtrl* m_offset_sec_3_control;
    wxPanel* m_grid_color_3_control;
    wxSpinCtrl* m_grid_line_width_3_control;
    wxChoice* m_grid_line_type_3_control;
    wxScrolledWindow* m_cursor_3_panel;
    wxBoxSizer* m_cursor_3_main_sizer;
    wxNotebook* m_specific_settings_scope_4_notebook;
    wxScrolledWindow* m_view_scope_4_panel;
    wxBoxSizer* m_view_4_main_sizer;
    wxPanel* m_back_color_4_control;
    wxStaticBox* m_main_sizer_4_text;
    wxChoice* m_sec_per_div_4_control;
    wxSpinCtrl* m_offset_sec_4_control;
    wxPanel* m_grid_color_4_control;
    wxSpinCtrl* m_grid_line_width_4_control;
    wxChoice* m_grid_line_type_4_control;
    wxScrolledWindow* m_cursor_4_panel;
    wxBoxSizer* m_cursor_4_main_sizer;
    wxSashLayoutWindow* m_top_pane;
    wxNotebook* m_scope_notebook;
    wxSplitterWindow* m_scope_horiz_splitter;
    wxToolBar* m_main_toolbar;
    wxStatusBar* m_main_statusbar;
////@end MainFrame member variables
    wxSplitterWindow* m_scope_vert_splitter_top;
    wxSplitterWindow* m_scope_vert_splitter_bottom;
	static void ScopeRefresh( int scope_index, bool erase_background);
	static void UpdateSamplesReadyLed( bool is_on);

	void UpdateSecPerDiv( int scope_index, int selection, wxSpinCtrl* offset_sec_control);
	static bool SetStsBarText( const wxString& text, int pane_index);
protected:
	static wxPanel* g_samples_ready_control;

	AppSettings *m_app_settings;
	bool CreateDynControls();
	bool UpdateControls( void);
	bool UpdateGrid( int scope_index);
	enum SCOPE_POSITIONS
	{
		SCOPE_POS_TOP_LEFT= 0,
		SCOPE_POS_TOP_RIGHT,
		SCOPE_POS_BOTTOM_LEFT,
		SCOPE_POS_BOTTOM_RIGHT,
	};
	DrawingPanel *m_scope_panel_array[ SCOPE_NUM_PANELS];
	static DrawingPanel *g_scope_panel_array[ SCOPE_NUM_PANELS];
	static wxStatusBar *g_main_statusbar;
	void UpdateGridLineWidth( int scope_index, int value);
	void UpdateTriggerPost( int value);
	void UpdateOffsetSec( int scope_index, int value);
	bool UpdateRecordFolder( void);
	void UpdateClock( double value);
	void UpdateTriggerEdge( void);
	void AdjustTriggerPost( void);
	void UpdateUseTTL( void);
	void DoStartStopRunning( void);
	void DoShowHideLeftPane( void);
	void DoShowHideBottomPane( void);
	void DoShowHideScopeLeftTopPane( bool do_check);
	void DoShowHideScopeRightTopPane( bool do_check);
	void DoShowHideScopeLeftBottomPane( bool do_check);
	void DoShowHideScopeRightBottomPane( bool do_check);
	void CheckScopeSplitters( void);
	void DoGridChooseColor( int scope_index, wxPanel *grid_color_control);
	void DoChooseColor( int scope_index, wxPanel *back_color_control);
	void UpdateDAC( void);
};

#endif
    // _MAINFRAME_H_
