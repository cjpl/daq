/////////////////////////////////////////////////////////////////////////////
// Name:        mainframe.cpp
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     09/04/07 14:18:40
// RCS-ID:      $Id: mainframe.cpp,v 1.2 2009/03/02 09:00:13 Colombini Exp $
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 09/04/07 14:18:40
#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "mainframe.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include <wx/wxprec.h>
#include <wx/tokenzr.h>
#include <wx/filename.h>


#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif
#include <wx/laywin.h>
#include <wx/cmndata.h>
#include <wx/colordlg.h>
#include <wx/log.h>
#include <wx/dir.h>
#include <wx/dirdlg.h> 
#include <wx/generic/dirdlgg.h>
#include <wx/datetime.h>
#include <wx/list.h>
#include <wx/filename.h>

////@begin includes
////@end includes

#include "infodialog.h"
#include "mainframe.h"
#include "wxBackgroundBitmap.h"
#include "generic_board.h"
#include "cvt_V1724.h"
#include "config_doc.h"
#include "spinctld.h"

////@begin XPM images
////@end XPM images

wxStatusBar* MainFrame::g_main_statusbar= NULL;
wxFrame* g_main_frame= NULL;
/*!
* MainFrame type definition
*/

IMPLEMENT_CLASS( MainFrame, wxFrame )

/*!
* MainFrame event table definition
*/

BEGIN_EVENT_TABLE( MainFrame, wxFrame )

////@begin MainFrame event table entries
    EVT_CLOSE( MainFrame::OnCloseWindow )
    EVT_SIZE( MainFrame::OnSize )

    EVT_CHOICE( ID_PLLSET_BOARD_TYPE_CHOICE, MainFrame::OnPllsetBoardTypeChoiceSelected )

    EVT_RADIOBOX( ID_PLLSET_CLKMOD_RADIOBOX, MainFrame::OnPllsetClkmodRadioboxSelected )

    EVT_SPINCTRL( ID_PLLSET_CLKIN_SPINCTRL, MainFrame::OnPllsetClkinSpinctrlUpdated )
    EVT_TEXT( ID_PLLSET_CLKIN_SPINCTRL, MainFrame::OnPllsetClkinSpinctrlTextUpdated )

    EVT_CHOICE( ID_PLLSET_VCXO_TYPE_CHOICE, MainFrame::OnPllsetVcxoTypeChoiceSelected )

    EVT_BUTTON( ID_PLLSET_READ_VCXO_TYPE_BUTTON, MainFrame::OnPllsetReadVcxoTypeButtonClick )

    EVT_CHOICE( ID_PLLSET_ADCFREQ_CHOICE, MainFrame::OnPllsetAdcfreqChoiceSelected )

    EVT_CHECKBOX( ID_PLLSET_CLKOUTEN_CHECKBOX, MainFrame::OnPllsetClkoutenCheckboxClick )

    EVT_CHOICE( ID_PLLSET_CLKOUTFREQ_CHOICE, MainFrame::OnPllsetClkoutfreqChoiceSelected )

    EVT_CHECKBOX( ID_PLLSET_CLKOUTDELAYEN_CHECKBOX, MainFrame::OnPllsetClkoutdelayenCheckboxClick )

    EVT_CHOICE( ID_PLLSET_CLKOUTDELAY_CHOICE, MainFrame::OnPllsetClkoutdelayChoiceSelected )

    EVT_MENU( ID_EXIT_TOOL, MainFrame::OnExitToolClick )

    EVT_MENU( ID_OPEN_TOOL, MainFrame::OnOpenToolClick )

    EVT_MENU( ID_SAVE_TOOL, MainFrame::OnSaveToolClick )

    EVT_MENU( ID_MAKE_OUTPUT_TOOL, MainFrame::OnMakeOutputToolClick )

    EVT_MENU( ID_DOWNLOAD_TOOL, MainFrame::OnDownloadToolClick )

    EVT_MENU( ID_HELP_TOOL, MainFrame::OnHelpToolClick )

////@end MainFrame event table entries
    EVT_TEXT( ID_PLLSET_CLKIN_DBLSPINCTRL, MainFrame::OnPllsetClkinDblSpinctrlTextUpdated )
    EVT_SPINCTRL( ID_PLLSET_CLKIN_DBLSPINCTRL, MainFrame::OnPllsetClkinDblSpinctrlUpdated )


END_EVENT_TABLE()


/*!
* MainFrame constructors
*/

MainFrame::MainFrame( )
{
	this->m_loaded_doc= 0;
	g_main_frame= this;
	this->m_loaded_doc= new ConfigDoc();
	this->m_updating= false;
}

MainFrame::MainFrame( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
	this->m_updating= false;
	this->m_loaded_doc= 0;
	Create( parent, id, caption, pos, size, style );
	g_main_frame= this;
	this->m_loaded_doc= new ConfigDoc();

}
MainFrame::~MainFrame( )
{
	if( this->m_loaded_doc)
	{
		delete this->m_loaded_doc;
		this->m_loaded_doc= (ConfigDoc*) 0;
	}
	if( this->m_app_settings) {
		delete this->m_app_settings;
		this->m_app_settings= NULL;
    }
    this->m_main_toolbar->PopEventHandler( true);
}

/*!
* MainFrame creator
*/

bool MainFrame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    this->m_updating = true;

	////@begin MainFrame member initialisation
    m_pll_settings_panel = NULL;
    m_pllset_board_type_control = NULL;
    m_pllset_board_base_addr_control = NULL;
    m_pllset_clkmod_control = NULL;
    m_pllset_clkin_sizer = NULL;
    m_pllset_clkin_control = NULL;
    m_pllset_clkin_label = NULL;
    m_pllset_vcxo_type_control = NULL;
    m_pllset_read_vcxo_type_control = NULL;
    m_pllset_adcfreq_choice = NULL;
    m_pllset_clkouten_control = NULL;
    m_pllset_clkoutfreq_choice = NULL;
    m_pllset_clkoutdelayen_control = NULL;
    m_pllset_clkoutdelay_choice = NULL;
    m_main_toolbar = NULL;
    m_main_statusbar = NULL;
	////@end MainFrame member initialisation

    m_pllset_clkin_dblcontrol = NULL;
	wxFileName fn( MainFrame::GetExecutablePath());
	wxFileName::SetCwd( fn.GetPath());
	
	//
	// Load application settings
	this->m_app_settings= new AppSettings( );

	// 
	// Load Application settings
	if( !this->m_app_settings->Load( ))
	{
		wxLogError( _("Error loading application settings ..."));
		return false;
	}

	////@begin MainFrame creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    this->SetFont(wxFont(9, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Verdana")));
    CreateControls();
    SetIcon(GetIconResource(wxT("app_icon.ico")));
    Centre();
	////@end MainFrame creation
	
    this->m_updating = false;

	if( !this->UpdateControls())
		return false;

    Centre();
	this->Layout();
	return true;
}

wxString MainFrame::GetExecutablePath()
{
    static bool found = false;
    static wxString path;

    if (found)
        return path;
    else
    {
#ifdef __WXMSW__

        char buf[512];
        *buf = '\0';
        GetModuleFileName(NULL, buf, 511);
        path = buf;

#elif defined(__WXMAC__)

        ProcessInfoRec processinfo;
        ProcessSerialNumber procno ;
        FSSpec fsSpec;

        procno.highLongOfPSN = NULL ;
        procno.lowLongOfPSN = kCurrentProcess ;
        processinfo.processInfoLength = sizeof(ProcessInfoRec);
        processinfo.processName = NULL;
        processinfo.processAppSpec = &fsSpec;

        GetProcessInformation( &procno , &processinfo ) ;
        path = wxMacFSSpec2MacFilename(&fsSpec);
#else
        wxString argv0 = wxTheApp->argv[0];

        if (wxIsAbsolutePath(argv0))
            path = argv0;
        else
        {
            wxPathList pathlist;
            pathlist.AddEnvList(wxT("PATH"));
            path = pathlist.FindAbsoluteValidPath(argv0);
        }

        wxFileName filename(path);
        filename.Normalize();
        path = filename.GetFullPath();
#endif
        found = true;
        return path;
    }
}

/*!
* Control creation for MainFrame
*/

void MainFrame::CreateControls()
{
#ifndef __WXMSW__
    wxInitAllImageHandlers();
#endif

    ////@begin MainFrame content construction
    // Generated by DialogBlocks, 19/02/2009 10:25:39 (unregistered)

    MainFrame* itemFrame1 = this;

    m_pll_settings_panel = new wxScrolledWindow( itemFrame1, ID_PLL_SETTINGS_SCROLLEDWINDOW, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER );
    m_pll_settings_panel->SetBackgroundColour(wxColour(255, 255, 255));
    m_pll_settings_panel->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Arial")));
    m_pll_settings_panel->SetScrollbars(1, 1, 1, 1);
    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
    m_pll_settings_panel->SetSizer(itemBoxSizer3);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer4, 0, wxALIGN_LEFT|wxALL, 8);
    wxStaticBox* itemStaticBoxSizer5Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("ADC BOARD"));
    wxStaticBoxSizer* itemStaticBoxSizer5 = new wxStaticBoxSizer(itemStaticBoxSizer5Static, wxHORIZONTAL);
    itemBoxSizer4->Add(itemStaticBoxSizer5, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 10);
    wxStaticBox* itemStaticBoxSizer6Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("Type"));
    wxStaticBoxSizer* itemStaticBoxSizer6 = new wxStaticBoxSizer(itemStaticBoxSizer6Static, wxHORIZONTAL);
    itemStaticBoxSizer5->Add(itemStaticBoxSizer6, 0, wxALIGN_TOP|wxLEFT|wxRIGHT, 3);
    wxString* m_pllset_board_type_controlStrings = NULL;
    m_pllset_board_type_control = new wxChoice( m_pll_settings_panel, ID_PLLSET_BOARD_TYPE_CHOICE, wxDefaultPosition, wxDefaultSize, 0, m_pllset_board_type_controlStrings, 0 );
    m_pllset_board_type_control->SetHelpText(_("Choose the ADC board type."));
    if (ShowToolTips())
        m_pllset_board_type_control->SetToolTip(_("Choose the ADC board type."));
    m_pllset_board_type_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer6->Add(m_pllset_board_type_control, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer8Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("Base address (Hex)"));
    wxStaticBoxSizer* itemStaticBoxSizer8 = new wxStaticBoxSizer(itemStaticBoxSizer8Static, wxHORIZONTAL);
    itemStaticBoxSizer5->Add(itemStaticBoxSizer8, 0, wxALIGN_TOP|wxLEFT|wxRIGHT, 3);
    m_pllset_board_base_addr_control = new wxTextCtrl( m_pll_settings_panel, ID_PLLSET_BOARD_BASE_ADDR_TEXTCTRL, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    m_pllset_board_base_addr_control->SetHelpText(_("Set the ADC base address ( 32 bit hex format)"));
    if (ShowToolTips())
        m_pllset_board_base_addr_control->SetToolTip(_("Set the ADC base address ( 32 bit hex format)"));
    m_pllset_board_base_addr_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer8->Add(m_pllset_board_base_addr_control, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer3->Add(itemBoxSizer10, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxBOTTOM, 8);
    wxStaticBox* itemStaticBoxSizer11Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("INPUT"));
    wxStaticBoxSizer* itemStaticBoxSizer11 = new wxStaticBoxSizer(itemStaticBoxSizer11Static, wxVERTICAL);
    itemBoxSizer10->Add(itemStaticBoxSizer11, 0, wxGROW|wxALL, 10);
    wxString m_pllset_clkmod_controlStrings[] = {
        _("&PLL"),
        _("&BYPASS")
    };
    m_pllset_clkmod_control = new wxRadioBox( m_pll_settings_panel, ID_PLLSET_CLKMOD_RADIOBOX, _("Clock modality"), wxDefaultPosition, wxDefaultSize, 2, m_pllset_clkmod_controlStrings, 1, wxRA_SPECIFY_ROWS );
    m_pllset_clkmod_control->SetSelection(0);
    m_pllset_clkmod_control->SetHelpText(_("Setup clock modality : PLL mode or BYPASS mode"));
    if (ShowToolTips())
        m_pllset_clkmod_control->SetToolTip(_("Setup clock modality : PLL mode or BYPASS mode"));
    m_pllset_clkmod_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Arial")));
    itemStaticBoxSizer11->Add(m_pllset_clkmod_control, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer13Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("Input clock (MHz)"));
    wxStaticBoxSizer* itemStaticBoxSizer13 = new wxStaticBoxSizer(itemStaticBoxSizer13Static, wxVERTICAL);
    itemStaticBoxSizer11->Add(itemStaticBoxSizer13, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    wxBoxSizer* itemBoxSizer14 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer13->Add(itemBoxSizer14, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    wxStaticText* itemStaticText15 = new wxStaticText( m_pll_settings_panel, wxID_STATIC, _("Target Frequency"), wxDefaultPosition, wxDefaultSize, wxNO_BORDER );
    itemBoxSizer14->Add(itemStaticText15, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticLine* itemStaticLine16 = new wxStaticLine( m_pll_settings_panel, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_VERTICAL );
    itemBoxSizer14->Add(itemStaticLine16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText17 = new wxStaticText( m_pll_settings_panel, wxID_STATIC, _("Actual Frequency"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer14->Add(itemStaticText17, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    m_pllset_clkin_sizer = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer13->Add(m_pllset_clkin_sizer, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    m_pllset_clkin_dblcontrol = new wxSpinCtrlDbl( m_pll_settings_panel, ID_PLLSET_CLKIN_DBLSPINCTRL, _T("50"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 250, 1 );
    m_pllset_clkin_dblcontrol->SetHelpText(_("Requested input operating frequency (MHz)"));
    if (ShowToolTips())
        m_pllset_clkin_dblcontrol->SetToolTip(_("Requested input operating frequency (MHz)"));
    m_pllset_clkin_dblcontrol->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    m_pllset_clkin_sizer->Add(m_pllset_clkin_dblcontrol, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_pllset_clkin_label = new wxStaticText( m_pll_settings_panel, ID_PLLSET_CLKIN_LABEL, _("Undefined value"), wxDefaultPosition, m_pll_settings_panel->ConvertDialogToPixels(wxSize(70, -1)), 0 );
    m_pllset_clkin_label->SetHelpText(_("Resulting input frequency"));
    if (ShowToolTips())
        m_pllset_clkin_label->SetToolTip(_("Resulting input frequency"));
    m_pllset_clkin_label->SetForegroundColour(wxColour(255, 0, 0));
    m_pllset_clkin_sizer->Add(m_pllset_clkin_label, 0, wxALIGN_BOTTOM|wxALL|wxADJUST_MINSIZE, 5);

    wxStaticBox* itemStaticBoxSizer21Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("VCXO frequency (MHz)"));
    wxStaticBoxSizer* itemStaticBoxSizer21 = new wxStaticBoxSizer(itemStaticBoxSizer21Static, wxHORIZONTAL);
    itemStaticBoxSizer11->Add(itemStaticBoxSizer21, 0, wxALIGN_LEFT|wxALL, 5);
    wxString* m_pllset_vcxo_type_controlStrings = NULL;
    m_pllset_vcxo_type_control = new wxChoice( m_pll_settings_panel, ID_PLLSET_VCXO_TYPE_CHOICE, wxDefaultPosition, wxDefaultSize, 0, m_pllset_vcxo_type_controlStrings, 0 );
    m_pllset_vcxo_type_control->SetHelpText(_("Choose the VCXO frequency."));
    if (ShowToolTips())
        m_pllset_vcxo_type_control->SetToolTip(_("Choose the VCXO frequency."));
    m_pllset_vcxo_type_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer21->Add(m_pllset_vcxo_type_control, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    m_pllset_read_vcxo_type_control = new wxButton( m_pll_settings_panel, ID_PLLSET_READ_VCXO_TYPE_BUTTON, _("Read"), wxDefaultPosition, wxDefaultSize, 0 );
    m_pllset_read_vcxo_type_control->SetHelpText(_("Read the VCXO frequency from the board"));
    if (ShowToolTips())
        m_pllset_read_vcxo_type_control->SetToolTip(_("Read the VCXO frequency from the board"));
    itemStaticBoxSizer21->Add(m_pllset_read_vcxo_type_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer24Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("OUTPUT"));
    wxStaticBoxSizer* itemStaticBoxSizer24 = new wxStaticBoxSizer(itemStaticBoxSizer24Static, wxVERTICAL);
    itemBoxSizer10->Add(itemStaticBoxSizer24, 0, wxGROW|wxALL, 10);
    wxStaticBox* itemStaticBoxSizer25Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("Sampling frequency"));
    wxStaticBoxSizer* itemStaticBoxSizer25 = new wxStaticBoxSizer(itemStaticBoxSizer25Static, wxVERTICAL);
    itemStaticBoxSizer24->Add(itemStaticBoxSizer25, 0, wxALIGN_LEFT|wxALL, 5);
    wxBoxSizer* itemBoxSizer26 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer25->Add(itemBoxSizer26, 0, wxALIGN_LEFT|wxALL, 5);
    wxString* m_pllset_adcfreq_choiceStrings = NULL;
    m_pllset_adcfreq_choice = new wxChoice( m_pll_settings_panel, ID_PLLSET_ADCFREQ_CHOICE, wxDefaultPosition, wxDefaultSize, 0, m_pllset_adcfreq_choiceStrings, 0 );
    m_pllset_adcfreq_choice->SetHelpText(_("Choose the sampling frequency."));
    if (ShowToolTips())
        m_pllset_adcfreq_choice->SetToolTip(_("Choose the sampling frequency."));
    m_pllset_adcfreq_choice->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemBoxSizer26->Add(m_pllset_adcfreq_choice, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer28Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("Output clock"));
    wxStaticBoxSizer* itemStaticBoxSizer28 = new wxStaticBoxSizer(itemStaticBoxSizer28Static, wxVERTICAL);
    itemStaticBoxSizer24->Add(itemStaticBoxSizer28, 0, wxALIGN_LEFT|wxALL, 5);
    m_pllset_clkouten_control = new wxCheckBox( m_pll_settings_panel, ID_PLLSET_CLKOUTEN_CHECKBOX, _("Enable"), wxDefaultPosition, wxDefaultSize, 0 );
    m_pllset_clkouten_control->SetValue(false);
    m_pllset_clkouten_control->SetHelpText(_("Enable/disable the output clock"));
    if (ShowToolTips())
        m_pllset_clkouten_control->SetToolTip(_("Enable/disable the output clock"));
    m_pllset_clkouten_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Arial")));
    itemStaticBoxSizer28->Add(m_pllset_clkouten_control, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer30 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer28->Add(itemBoxSizer30, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    wxStaticBox* itemStaticBoxSizer31Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("Frequency"));
    wxStaticBoxSizer* itemStaticBoxSizer31 = new wxStaticBoxSizer(itemStaticBoxSizer31Static, wxHORIZONTAL);
    itemBoxSizer30->Add(itemStaticBoxSizer31, 0, wxGROW|wxALL, 5);
    wxString* m_pllset_clkoutfreq_choiceStrings = NULL;
    m_pllset_clkoutfreq_choice = new wxChoice( m_pll_settings_panel, ID_PLLSET_CLKOUTFREQ_CHOICE, wxDefaultPosition, wxDefaultSize, 0, m_pllset_clkoutfreq_choiceStrings, 0 );
    m_pllset_clkoutfreq_choice->SetHelpText(_("Choose the output frequency."));
    if (ShowToolTips())
        m_pllset_clkoutfreq_choice->SetToolTip(_("Choose the output frequency."));
    m_pllset_clkoutfreq_choice->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemStaticBoxSizer31->Add(m_pllset_clkoutfreq_choice, 1, wxALIGN_BOTTOM|wxLEFT|wxRIGHT, 3);

    wxStaticBox* itemStaticBoxSizer33Static = new wxStaticBox(m_pll_settings_panel, wxID_ANY, _("Delay"));
    wxStaticBoxSizer* itemStaticBoxSizer33 = new wxStaticBoxSizer(itemStaticBoxSizer33Static, wxHORIZONTAL);
    itemBoxSizer30->Add(itemStaticBoxSizer33, 0, wxGROW|wxALL, 5);
    wxBoxSizer* itemBoxSizer34 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer33->Add(itemBoxSizer34, 0, wxALIGN_BOTTOM, 0);
    m_pllset_clkoutdelayen_control = new wxCheckBox( m_pll_settings_panel, ID_PLLSET_CLKOUTDELAYEN_CHECKBOX, _("Enable"), wxDefaultPosition, wxDefaultSize, 0 );
    m_pllset_clkoutdelayen_control->SetValue(false);
    m_pllset_clkoutdelayen_control->SetHelpText(_("Enable/disable the output clock delay"));
    if (ShowToolTips())
        m_pllset_clkoutdelayen_control->SetToolTip(_("Enable/disable the output clock delay"));
    m_pllset_clkoutdelayen_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxBOLD, false, _T("Arial")));
    itemBoxSizer34->Add(m_pllset_clkoutdelayen_control, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer36 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer34->Add(itemBoxSizer36, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    wxString* m_pllset_clkoutdelay_choiceStrings = NULL;
    m_pllset_clkoutdelay_choice = new wxChoice( m_pll_settings_panel, ID_PLLSET_CLKOUTDELAY_CHOICE, wxDefaultPosition, wxDefaultSize, 0, m_pllset_clkoutdelay_choiceStrings, 0 );
    m_pllset_clkoutdelay_choice->SetHelpText(_("Choose the clockout delay."));
    if (ShowToolTips())
        m_pllset_clkoutdelay_choice->SetToolTip(_("Choose the clockout delay."));
    m_pllset_clkoutdelay_choice->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
    itemBoxSizer36->Add(m_pllset_clkoutdelay_choice, 1, wxALIGN_BOTTOM|wxLEFT|wxRIGHT, 3);

    m_pll_settings_panel->FitInside();

    m_main_toolbar = CreateToolBar( wxTB_FLAT|wxTB_HORIZONTAL|wxTB_TEXT|wxWANTS_CHARS, ID_MAIN_TOOLBAR );
    m_main_toolbar->SetToolBitmapSize(wxSize(34, 34));
    wxBitmap itemtool39Bitmap(itemFrame1->GetBitmapResource(wxT("exit_34.png")));
    wxBitmap itemtool39BitmapDisabled;
    m_main_toolbar->AddTool(ID_EXIT_TOOL, _("Exit"), itemtool39Bitmap, itemtool39BitmapDisabled, wxITEM_NORMAL, _("Close application and exit to system."), _("Close application and exit to system."));
    m_main_toolbar->AddSeparator();
    wxBitmap itemtool41Bitmap(itemFrame1->GetBitmapResource(wxT("open.png")));
    wxBitmap itemtool41BitmapDisabled;
    m_main_toolbar->AddTool(ID_OPEN_TOOL, _("Open"), itemtool41Bitmap, itemtool41BitmapDisabled, wxITEM_NORMAL, _("Open a configuration file."), _("Open a configuration file."));
    wxBitmap itemtool42Bitmap(itemFrame1->GetBitmapResource(wxT("save.png")));
    wxBitmap itemtool42BitmapDisabled;
    m_main_toolbar->AddTool(ID_SAVE_TOOL, _("Save"), itemtool42Bitmap, itemtool42BitmapDisabled, wxITEM_NORMAL, _("Save configuration to file."), _("Save configuration to file."));
    m_main_toolbar->AddSeparator();
    wxBitmap itemtool44Bitmap(itemFrame1->GetBitmapResource(wxT("Magic-32x32.png")));
    wxBitmap itemtool44BitmapDisabled;
    m_main_toolbar->AddTool(ID_MAKE_OUTPUT_TOOL, _("Make output"), itemtool44Bitmap, itemtool44BitmapDisabled, wxITEM_NORMAL, _("Make an output file form current settings."), _("Make an output file form current settings."));
    wxBitmap itemtool45Bitmap(itemFrame1->GetBitmapResource(wxT("download.png")));
    wxBitmap itemtool45BitmapDisabled;
    m_main_toolbar->AddTool(ID_DOWNLOAD_TOOL, _("Write to flash"), itemtool45Bitmap, itemtool45BitmapDisabled, wxITEM_NORMAL, _("Write file to board's flash."), _("Write file to board's flash."));
    m_main_toolbar->AddSeparator();
    wxBitmap itemtool47Bitmap(itemFrame1->GetBitmapResource(wxT("about_34.png")));
    wxBitmap itemtool47BitmapDisabled;
    m_main_toolbar->AddTool(ID_HELP_TOOL, _("About"), itemtool47Bitmap, itemtool47BitmapDisabled, wxITEM_NORMAL, _("About CAEN PLL config"), _("About CAEN PLL config"));
    m_main_toolbar->Realize();
    itemFrame1->SetToolBar(m_main_toolbar);

    m_main_statusbar = new wxStatusBar( itemFrame1, ID_MAIN_STATUSBAR, 0 );
    m_main_statusbar->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Verdana")));
    m_main_statusbar->SetFieldsCount(2);
    int m_main_statusbarWidths[2];
    m_main_statusbarWidths[0] = 250;
    m_main_statusbarWidths[1] = -1;
    m_main_statusbar->SetStatusWidths(2, m_main_statusbarWidths);
    itemFrame1->SetStatusBar(m_main_statusbar);

	////@end MainFrame content construction

	//
	// !!!!!  WARNING  !!!!
	// 
	// Bypass Designer settings and add custom control
	// The following code generated from designer (in the above section)

	//   m_pllset_clkin_control = new wxSpinCtrl( m_pll_settings_panel, ID_PLLSET_CLKIN_SPINCTRL, _T("50"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 250, 1 );
	//   m_pllset_clkin_control->SetHelpText(_("Set the input frequency (MHz)"));
	//   if (ShowToolTips())
	//       m_pllset_clkin_control->SetToolTip(_("Set the input frequency (MHz)"));
	//   m_pllset_clkin_control->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
	//   m_pllset_clkin_sizer->Add(m_pllset_clkin_control, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// must be replaced in the same position with this one 
	//   m_pllset_clkin_dblcontrol = new wxSpinCtrlDbl( m_pll_settings_panel, ID_PLLSET_CLKIN_DBLSPINCTRL, _T("50"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 250, 1 );
	//   m_pllset_clkin_dblcontrol->SetHelpText(_("Requested input operating frequency (MHz)"));
	//   if (ShowToolTips())
	//       m_pllset_clkin_dblcontrol->SetToolTip(_("Requested input operating frequency (MHz)"));
	//   m_pllset_clkin_dblcontrol->SetFont(wxFont(8, wxSWISS, wxNORMAL, wxNORMAL, false, _T("Arial")));
	//   m_pllset_clkin_sizer->Add(m_pllset_clkin_dblcontrol, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	// Show Toolbar logo
 	m_main_toolbar->PushEventHandler( new wxBackgroundBitmap( wxBitmap(_("caen.png"), wxBITMAP_TYPE_PNG), this));

	MainFrame::g_main_statusbar= this->m_main_statusbar;
}

/*!
* Should we show tooltips?
*/

bool MainFrame::ShowToolTips()
{
	return true;
}

/*!
* Get bitmap resources
*/

wxBitmap MainFrame::GetBitmapResource( const wxString& name )
{
	// Bitmap retrieval
	////@begin MainFrame bitmap retrieval
    wxUnusedVar(name);
    if (name == _T("exit_34.png"))
    {
        wxBitmap bitmap(_T("exit_34.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("open.png"))
    {
        wxBitmap bitmap(_T("open.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("save.png"))
    {
        wxBitmap bitmap(_T("save.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("Magic-32x32.png"))
    {
        wxBitmap bitmap(_T("Magic-32x32.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("download.png"))
    {
        wxBitmap bitmap(_T("download.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("about_34.png"))
    {
        wxBitmap bitmap(_T("about_34.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    return wxNullBitmap;
	////@end MainFrame bitmap retrieval
}

/*!
* Get icon resources
*/

wxIcon MainFrame::GetIconResource( const wxString& name )
{
	// Icon retrieval
    wxUnusedVar(name);
    if (name == _T("app_icon.ico"))
    {
        wxIcon icon(_T("app_icon.ico"), wxBITMAP_TYPE_ICO);
        return icon;
    }
    return wxNullIcon;
}
/*!
* wxEVT_COMMAND_MENU_SELECTED event handler for ID_EXIT_TOOL
*/

void MainFrame::OnExitToolClick( wxCommandEvent& /* event*/ )
{
	this->Close();
}


/*!
* wxEVT_SIZE event handler for ID_MAIN_FRAME
*/

void MainFrame::OnSize( wxSizeEvent& /* event*/ )
{
#if wxUSE_MDI_ARCHITECTURE
	wxLayoutAlgorithm layout;
	layout.LayoutFrame(this);
#endif // wxUSE_MDI_ARCHITECTURE
	if( this->m_main_toolbar)
		this->m_main_toolbar->Refresh( true);
}

/*!
 * wxEVT_CLOSE_WINDOW event handler for ID_MAIN_FRAME
 */

void MainFrame::OnCloseWindow( wxCloseEvent& event )
{
	if( this->m_loaded_doc->IsDirty())
	{
		switch( wxMessageBox( 
			_("Do you want to save changes ?"), 
			_( "Current document has changed !"), 
			wxYES_NO| wxCANCEL| wxICON_QUESTION,
			this))
		{
		case wxYES:
			this->DoSaveConfig();
			break;
		case wxCANCEL:
			return;
		}
	}

	if( this->m_app_settings)
	{
		{
            this->m_app_settings->SetVMEClkinFreq( this->m_pllset_clkin_dblcontrol->GetValue());
			wxMutexLocker lock( this->m_app_settings->m_mutex);
			this->m_app_settings->Save();
		}
		delete this->m_app_settings;
		this->m_app_settings= NULL;
	}
    event.Skip();
}



bool MainFrame::UpdateControls( void)
{
	wxMutexLocker lock( this->m_app_settings->m_mutex);

	this->m_pllset_board_type_control->Clear();
	//this->m_pllset_board_type_control->Append( _(""), (void*)0);

	for( unsigned int i= 0; i< this->m_app_settings->m_board_array.GetCount(); i++)
	{
		this->m_pllset_board_type_control->Append( ((GenericBoard*)this->m_app_settings->m_board_array[i])->GetTypeString(), this->m_app_settings->m_board_array[i]);
	}
	this->m_pllset_board_type_control->SetSelection( 0);

	this->m_pllset_clkoutfreq_choice->Enable( this->m_pllset_clkouten_control->GetValue());
	this->m_pllset_clkoutdelayen_control->Enable( this->m_pllset_clkouten_control->GetValue());
	this->m_pllset_clkoutdelay_choice->Enable( this->m_pllset_clkoutdelayen_control->GetValue()&& this->m_pllset_clkouten_control->GetValue());

	//this->m_pllset_plldiv_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_clkin_label->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_vcxo_type_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_read_vcxo_type_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);

	//this->m_pllset_clkin_dblcontrol->Enable( this->m_pllset_clkmod_control->GetSelection()!= 0);

	this->UpdateVCXOTypes();
	this->m_pllset_board_base_addr_control->SetValue(wxString::Format(_("%08x"), (this->m_app_settings->GetVMEBaseAddreess())));
    this->m_pllset_clkin_dblcontrol->SetValue(this->m_app_settings->GetVMEClkinFreq());
	this->UpdateOutput();
	return true;
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_HELP_TOOL
 */

void MainFrame::OnHelpToolClick( wxCommandEvent& /* event*/ )
{
	InfoDialog dlg( this);
	dlg.ShowModal();
}

bool MainFrame::SetStsBarText( const wxString& text, int pane_index)
{
	if(( pane_index>= STS_BAR_NUM_PANES)|| ( MainFrame::g_main_statusbar== NULL))
		return false;
	//::wxMutexGuiEnter();
	MainFrame::g_main_statusbar->SetStatusText( text, pane_index);
	//::wxMutexGuiLeave();
	return true;
}


/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_OPEN_TOOL
 */

void MainFrame::OnOpenToolClick( wxCommandEvent& /*event*/ )
{
	if( this->m_loaded_doc->IsDirty())
	{
		switch( wxMessageBox( 
			_("Do you want to save changes ?"), 
			_( "Current document has changed !"), 
			wxYES_NO| wxCANCEL| wxICON_QUESTION,
			this))
		{
		case wxYES:
			this->DoSaveConfig();
			break;
		case wxCANCEL:
			return;
		}
	}
	this->DoLoadConfig();
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_SAVE_TOOL
 */

void MainFrame::OnSaveToolClick( wxCommandEvent& /*event*/ )
{
	this->DoSaveConfig();
}

bool MainFrame::DoLoadConfig()
{
	wxString filename= wxFileSelector( 
		_("Select a PLL configuration file to load ..."), 
		_(""),
		_(""), 
		_("cpc"),
		_("CAEN PLL Configuration files (*.cpc)|*.cpc|All files (*.*)|*.*"), 
		wxOPEN| wxFILE_MUST_EXIST, 
		this);
	if( filename.IsEmpty())
		return false;

	if( !this->m_loaded_doc->Load( filename))
		return false;

	if( !this->SetControls())
		return false;

	this->SetDirty( false);
	
	// Status bar update
	MainFrame::SetStsBarText( this->m_loaded_doc->GetFilename(), STS_BAR_PANE_FILENAME);

	return true;
}
bool MainFrame::DoSaveConfig()
{
	if( !this->GetControls())
		return false;

	wxString cfg_filename= this->m_loaded_doc->GetFilename();
	wxString path= _("");
	wxString name= _("");
	if( !cfg_filename.IsEmpty())
	{
		wxFileName::SplitPath( cfg_filename, &path, &name, NULL);
	}
	wxString filename= wxFileSelector( 
		_("Select a PLL configuration file to save ..."), 
		path,
		name, 
		_("cpc"),
		_("CAEN PLL Configuration files (*.cpc)|*.cpc|All files (*.*)|*.*"), 
		wxSAVE| wxOVERWRITE_PROMPT, 
		this);
	if( filename.IsEmpty())
		return false;

	if( !this->m_loaded_doc->Save( filename))
		return false;

	// Status bar update
	MainFrame::SetStsBarText( this->m_loaded_doc->GetFilename(), STS_BAR_PANE_FILENAME);
	return true;

}
bool MainFrame::SetControls()
{
	for( unsigned int i= 0; i< this->m_pllset_board_type_control->GetCount(); i++)
	{
		GenericBoard *board= ( GenericBoard *)this->m_pllset_board_type_control->GetClientData( i);
		if( !board)
			continue;
		if( board->GetType()== this->m_loaded_doc->GetBoardType())
		{
			this->m_pllset_board_type_control->SetSelection( i);
			break;
		}
	}
	this->m_pllset_board_base_addr_control->SetValue( wxString::Format( _("%04X"), this->m_loaded_doc->GetBoardBaseAddress()));
	this->m_pllset_vcxo_type_control->SetStringSelection( wxString::Format( _("%d"), this->m_loaded_doc->GetVCXOFreq()));
	this->m_pllset_clkmod_control->SetSelection( this->m_loaded_doc->GetPLLMode()? 0: 1);
	this->m_pllset_clkin_dblcontrol->SetValue( this->m_loaded_doc->GetInputClock());

	this->UpdateOutput();

	this->m_pllset_clkouten_control->SetValue( this->m_loaded_doc->GetClockOutEnable());
	this->SelectByData( this->m_pllset_clkoutdelay_choice, this->m_loaded_doc->GetClockOutDelay());
	this->SelectByData( this->m_pllset_clkoutfreq_choice, this->m_loaded_doc->GetClockOutDivider());
	this->SelectByData( this->m_pllset_adcfreq_choice, this->m_loaded_doc->GetADCDivider());

	this->m_pllset_clkoutdelayen_control->SetValue( this->m_loaded_doc->GetClockOutDelayEnable());

	this->m_pllset_clkoutfreq_choice->Enable( this->m_pllset_clkouten_control->GetValue());
	this->m_pllset_clkoutdelayen_control->Enable( this->m_pllset_clkouten_control->GetValue());
	this->m_pllset_clkoutdelay_choice->Enable( this->m_pllset_clkoutdelayen_control->GetValue()&& this->m_pllset_clkouten_control->GetValue());

	this->m_pllset_clkin_label->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_vcxo_type_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_read_vcxo_type_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);


	return true;
}
bool MainFrame::GetControls()
{
	int sel;
	unsigned long board_addr;
	if( !this->m_pllset_board_base_addr_control->GetValue().ToULong( &board_addr, 16))
	{
		wxLogError( _("Invalid board base address !"));
		return false;
	}
	this->m_loaded_doc->SetBoardType( (( GenericBoard *)this->m_pllset_board_type_control->GetClientData( this->m_pllset_board_type_control->GetSelection()))->GetType());
	this->m_loaded_doc->SetBoardBaseAddress( ( UINT32)board_addr); 

	this->m_loaded_doc->SetClockOutEnable( this->m_pllset_clkouten_control->GetValue( ));

	//this->m_loaded_doc->SetClockOutDelay( this->m_pllset_clkoutdelay_control->GetValue( ));
	sel= this->m_pllset_clkoutdelay_choice->GetSelection();
	if( sel< 0) {
		wxLogError( _("Output Clock delay not selected !"));
		return false;
	}
	this->m_loaded_doc->SetClockOutDelay( ((IntClientData*)this->m_pllset_clkoutdelay_choice->GetClientObject( sel))->GetVal());

	//this->m_loaded_doc->SetInputClockDivider( this->m_pllset_plldiv_control->GetValue( ));
	long tmp= 0;
	this->m_pllset_vcxo_type_control->GetStringSelection( ).ToLong( &tmp);
	this->m_loaded_doc->SetVCXOFreq( (int)tmp);
	this->m_loaded_doc->SetPLLMode( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_loaded_doc->SetInputClock( this->m_pllset_clkin_dblcontrol->GetValue( ));
	this->m_loaded_doc->SetClockOutDelayEnable( this->m_pllset_clkoutdelayen_control->GetValue( ));

	//this->m_loaded_doc->SetADCDivider( this->m_pllset_adcdivider_control->GetValue( ));
	sel= this->m_pllset_adcfreq_choice->GetSelection();
	if( sel< 0) {
		wxLogError( _("Sampling frequency not selected !"));
		return false;
	}
	this->m_loaded_doc->SetADCDivider( ((IntClientData*)this->m_pllset_adcfreq_choice->GetClientObject( sel))->GetVal());

	//this->m_loaded_doc->SetClockOutDivider( this->m_pllset_clkoutdivider_control->GetValue());
	sel= this->m_pllset_clkoutfreq_choice->GetSelection();
	if( sel< 0) {
		wxLogError( _("Output Clock frequency not selected !"));
		return false;
	}
	this->m_loaded_doc->SetClockOutDivider( ((IntClientData*)this->m_pllset_clkoutfreq_choice->GetClientObject( sel))->GetVal());

	return true;
}

void MainFrame::SetDirty( bool value)
{
	if( this->m_loaded_doc)
		this->m_loaded_doc->SetDirty( value);
}
/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_BOARD_TYPE_CHOICE
 */

void MainFrame::OnPllsetBoardTypeChoiceSelected( wxCommandEvent& /*event*/ )
{
	if( this->m_updating)
		return;
	this->SetDirty( true);
	this->UpdateOutput();
	this->UpdateVCXOTypes();
}
void MainFrame::UpdateVCXOTypes( void)
{
	// Update VCXO types
	this->m_pllset_vcxo_type_control->Clear();
	if( this->m_pllset_board_type_control->GetSelection()< 0) 
		return;
	GenericBoard *board= ( GenericBoard *)this->m_pllset_board_type_control->GetClientData( this->m_pllset_board_type_control->GetSelection());
	int type= 0;
	int freq= 0;
	while( board->GetVCXOFreq( type++, freq))
	{
	  wxString item= wxString::Format(_("%d"), freq);
		if( this->m_pllset_vcxo_type_control->FindString( item)< 0) {
			this->m_pllset_vcxo_type_control->Append( item);
		}
	}
    int index;
    if(( index= this->m_pllset_vcxo_type_control->FindString(_("500")))>= 0)
	{
		this->m_pllset_vcxo_type_control->SetSelection( index);
	}
    else
		this->m_pllset_vcxo_type_control->SetSelection( 0);

	//this->m_main_statusbar->Refresh();
}


/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_PLLSET_CLKIN_SPINCTRL
 */

void MainFrame::OnPllsetClkinSpinctrlUpdated( wxSpinEvent& /*event*/ )
{
	if( this->m_updating)
		return;
	this->SetDirty( true);
	this->UpdateOutput();
}

/*!
 * wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_PLLSET_CLKIN_DBLSPINCTRL
 */

void MainFrame::OnPllsetClkinDblSpinctrlUpdated( wxSpinEvent& /*event*/ )
{
	if( this->m_updating)
		return;
	this->SetDirty( true);
	this->UpdateOutput();
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PLLSET_CLKIN_SPINCTRL
 */

void MainFrame::OnPllsetClkinSpinctrlTextUpdated( wxCommandEvent& /*event*/ )
{
	if( this->m_updating)
		return;
	this->SetDirty( true);
	this->UpdateOutput();
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PLLSET_CLKIN_DBLSPINCTRL
 */

void MainFrame::OnPllsetClkinDblSpinctrlTextUpdated( wxCommandEvent& /*event*/ )
{
	if( this->m_updating)
		return;
	this->SetDirty( true);
	this->UpdateOutput();
}

/*!
 * wxEVT_COMMAND_RADIOBOX_SELECTED event handler for ID_PLLSET_CLKMOD_RADIOBOX
 */

void MainFrame::OnPllsetClkmodRadioboxSelected( wxCommandEvent& /*event*/ )
{

	//this->m_pllset_plldiv_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_clkin_label->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_vcxo_type_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);
	this->m_pllset_read_vcxo_type_control->Enable( this->m_pllset_clkmod_control->GetSelection()== 0);

	//this->m_pllset_clkin_dblcontrol->Enable( this->m_pllset_clkmod_control->GetSelection()!= 0);

	if( this->m_updating)
		return;
	this->SetDirty( true);
	this->UpdateOutput();

}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_PLLSET_CLKOUTEN_CHECKBOX
 */

void MainFrame::OnPllsetClkoutenCheckboxClick( wxCommandEvent& /*event*/ )
{
	this->SetDirty( true);
	this->m_pllset_clkoutfreq_choice->Enable( this->m_pllset_clkouten_control->GetValue());
	this->m_pllset_clkoutdelayen_control->Enable( this->m_pllset_clkouten_control->GetValue());
	this->m_pllset_clkoutdelay_choice->Enable( this->m_pllset_clkoutdelayen_control->GetValue()&& this->m_pllset_clkouten_control->GetValue());

}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MAKE_OUTPUT_TOOL
 */

void MainFrame::OnMakeOutputToolClick( wxCommandEvent& /*event*/ )
{
	this->MakeDownloadFile();
}

/*!
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_DOWNLOAD_TOOL
 */

void MainFrame::OnDownloadToolClick( wxCommandEvent& /*event*/ )
{
	this->DownloadFile();
}
bool MainFrame::DownloadFile()
{
	if( !this->GetControls())
	{
		return false;
	}
	wxString cfg_filename= this->m_loaded_doc->GetFilename();
	wxString path= _("");
	wxString name= _("");
	if( !cfg_filename.IsEmpty())
	{
		wxFileName::SplitPath( cfg_filename, &path, &name, NULL);
	}
	wxString filename= wxFileSelector( 
		_("Select the output file to write into flash ..."), 
		path,
		name, 
		_("txt"),
		_("Output files (*.txt)|*.txt|All files (*.*)|*.*"), 
		wxOPEN| wxFILE_MUST_EXIST, 
		this);
	if( filename.IsEmpty())
		return false;
	
	// select board
	GenericBoard* board= ( GenericBoard *)this->m_pllset_board_type_control->GetClientData( this->m_pllset_board_type_control->GetSelection());

	// Download the file 
	if( !board->DownLoadFile( filename, this->m_loaded_doc->GetBoardBaseAddress()))
	{
		wxLogError( _("Some errors occurred during PLL file writing !"));
		return false;
	}
	wxMessageBox( 
		_("PLL file written correctly !"), 
		_( "PLL file writing ..."), 
		wxOK| wxICON_INFORMATION,
		this);
	return true;
}

bool MainFrame::MakeDownloadFile()
{
	if( !this->GetControls())
	{
		return false;
	}

	wxString cfg_filename= this->m_loaded_doc->GetFilename();
	wxString path= _("");
	wxString name= _("");
	if( !cfg_filename.IsEmpty())
	{
		wxFileName::SplitPath( cfg_filename, &path, &name, NULL);
	}
	wxString filename= wxFileSelector( 
		_("Select the output file to be created ..."), 
		path,
		name, 
		_("txt"),
		_("Output files (*.txt)|*.txt|All files (*.*)|*.*"), 
		wxSAVE| wxOVERWRITE_PROMPT, 
		this);
	if( filename.IsEmpty())
		return false;

	GenericBoard *board= ( GenericBoard *)this->m_pllset_board_type_control->GetClientData( this->m_pllset_board_type_control->GetSelection());
	return board->MakeDownloadFile( filename, *this->m_loaded_doc);
}

void MainFrame::UpdateOutput()
{
	this->m_main_statusbar->Refresh();

	GenericBoard *board= ( GenericBoard *)this->m_pllset_board_type_control->GetClientData( this->m_pllset_board_type_control->GetSelection());
	this->m_updating= true;
	// Update Output frequency 
	float input_freq;
	if( this->m_pllset_clkmod_control->GetSelection()== 0)
	{
		// PLL mode: get it from CLK2 (internal source)
		wxString item= this->m_pllset_vcxo_type_control->GetStringSelection();
		double val= 0;
		if( !item.Length()) {
			this->m_updating= false;
			return;
		}
		if( !item.ToDouble( &val)) {
			wxMessageBox( _("The input clock value was not correctly formatted."), wxT("CAENPLLConfig"), wxOK | wxCENTRE | wxICON_ERROR  );
			this->m_updating= false;
			return;
		}
		input_freq= (float) val;
		float clkin= (float) this->m_pllset_clkin_dblcontrol->GetValue();
		int R, N;
		float f_pfd= board->GetPFDFreqMHz();
		float f_pfd_tolerance= board->GetPFDFreqToleranceMHz();
		if( !GenericBoard::ApproximateFin( clkin, input_freq, f_pfd, f_pfd_tolerance, R, N)){
			//wxMessageBox( _("Cannot get a valid dividers set and/or PFD frequency for the specified input clock value."), wxT("CAENPLLConfig"), wxOK | wxCENTRE | wxICON_ERROR  );
			this->m_pllset_clkin_label->SetLabel( _("Undefined value"));
			this->m_pllset_clkin_label->SetForegroundColour( wxColour( 255, 0, 0));
			this->m_updating= false;
			return;
		}
		// Show clock in 
		this->m_pllset_clkin_label->SetLabel( wxString::Format( _("%0.4f MHz"), clkin));
		if( fabs( clkin- this->m_pllset_clkin_dblcontrol->GetValue())> 0.000001) {
			this->m_pllset_clkin_label->SetForegroundColour( wxColour( 255, 0, 0));
		} else {
			this->m_pllset_clkin_label->SetForegroundColour( wxColour( 0, 0, 0));
		}
	}
	else
	{
		// Bypass mode: get it from input control
		input_freq= this->m_pllset_clkin_dblcontrol->GetValue();
		// Show clock in 
		this->m_pllset_clkin_label->SetLabel( wxString::Format(_("%0.4f MHz"), input_freq));
		this->m_pllset_clkin_label->SetForegroundColour( wxColour( 0, 0, 0));
	}

	// ADC Freq
	// Calculate the allowed adc frequencies
	wxString adc_freq_org_val= this->m_pllset_adcfreq_choice->GetStringSelection();
	// free up values77
	this->m_pllset_adcfreq_choice->Clear();
	for( int i= 1; i<= 32; i++) {
		float freq= input_freq/ i;
		if( ( freq> board->GetMaxFreq())|| 
			( freq< board->GetMinFreq())) {
			// value out of board range
			continue;
		}
		// Add value to list
		this->m_pllset_adcfreq_choice->Append( wxString::Format(_("%0.4f MHz"), freq), new IntClientData( i));
	}
	if( !this->m_pllset_adcfreq_choice->SetStringSelection( adc_freq_org_val)) {
		this->m_pllset_adcfreq_choice->SetSelection( 0);
	}

	// Clock Out Freq
	// Calculate the allowed clockout frequencies
	wxString clkout_freq_org_val= this->m_pllset_clkoutfreq_choice->GetStringSelection();
	// free up values
	this->m_pllset_clkoutfreq_choice->Clear();
	for( int i= 1; i<= 32; i++) {
		float freq= input_freq/ i;
		// Add value to list
		this->m_pllset_clkoutfreq_choice->Append( wxString::Format(_("%0.4f MHz"), freq), new IntClientData( i));
	}
	if( !this->m_pllset_clkoutfreq_choice->SetStringSelection( clkout_freq_org_val)) {
		this->m_pllset_clkoutfreq_choice->SetSelection( 0);
	}

	// Output delay
	// Calculate the allowed output delay values
	wxString delay_org_val= this->m_pllset_clkoutdelay_choice->GetStringSelection();
	// free up values
	this->m_pllset_clkoutdelay_choice->Clear();
	for( int i= 0; i<= 31; i++) {
		double calc_delay_ps= (double)i* ( board->GetClockOutDelayStepNS()* 1000.0)+ ( board->GetClockOutDelayBaseNS()* 1000.0);
		if( calc_delay_ps>= 1000)
			// Show as nS
		  this->m_pllset_clkoutdelay_choice->Append( wxString::Format(_("%0.2f nS"), calc_delay_ps* 0.001), new IntClientData( i));
		else
			// Show as pS
		  this->m_pllset_clkoutdelay_choice->Append( wxString::Format(_("%0.2f pS"), calc_delay_ps), new IntClientData( i));
	}
	if( !this->m_pllset_clkoutdelay_choice->SetStringSelection( delay_org_val)) {
		this->m_pllset_clkoutdelay_choice->SetSelection( 0);
	}

	this->m_updating= false;
}

/*!
 * wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_PLLSET_CLKOUTDELAYEN_CHECKBOX
 */

void MainFrame::OnPllsetClkoutdelayenCheckboxClick( wxCommandEvent& /*event */)
{
	this->m_pllset_clkoutdelay_choice->Enable( this->m_pllset_clkoutdelayen_control->GetValue()&& this->m_pllset_clkouten_control->GetValue());
}


/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_VCXO_TYPE_CHOICE
 */

void MainFrame::OnPllsetVcxoTypeChoiceSelected( wxCommandEvent& /*event */)
{
	if( this->m_updating)
		return;
	this->SetDirty( true);
	this->UpdateOutput();
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_PLLSET_READ_VCXO_TYPE_BUTTON
 */

void MainFrame::OnPllsetReadVcxoTypeButtonClick( wxCommandEvent& /*event */)
{
	unsigned long board_addr;
	if( !this->m_pllset_board_base_addr_control->GetValue().ToULong( &board_addr, 16))
	{
		wxLogError( _("Invalid board base address !"));
		return;
	}

	// Read the VCXO type from board
	GenericBoard *board= ( GenericBoard *)this->m_pllset_board_type_control->GetClientData( this->m_pllset_board_type_control->GetSelection());

	int vcxo_type= 0;
	if( !board->ReadVCXOType( vcxo_type, board_addr)) {
		wxMessageBox( _("Error reading VCXO type from board."), wxT("CAENPLLConfig"), wxOK | wxCENTRE | wxICON_ERROR  );
		return;
	}
	int freq= 0;
	if( !board->GetVCXOFreq( vcxo_type, freq)){
		wxMessageBox( _("Unknown VCXO type. Please update your settings' file."), wxT("CAENPLLConfig"), wxOK | wxCENTRE | wxICON_ERROR  );
		return;
	}
	if( !this->m_pllset_vcxo_type_control->SetStringSelection( wxString::Format(_("%d"), freq))) {
		wxMessageBox( _("Unknown VCXO type. Please update your settings' file."), wxT("CAENPLLConfig"), wxOK | wxCENTRE | wxICON_ERROR  );
		return;
	}
	this->UpdateOutput();
}


/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_ADCDIVIDER_CHOICE
 */

void MainFrame::OnPllsetAdcfreqChoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_ADCDIVIDER_CHOICE in MainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_ADCDIVIDER_CHOICE in MainFrame. 
}


/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTDIVIDER_CHOICE
 */

void MainFrame::OnPllsetClkoutfreqChoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTDIVIDER_CHOICE in MainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTDIVIDER_CHOICE in MainFrame. 
}

/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTDELAY_CHOICE
 */

void MainFrame::OnPllsetClkoutdelayChoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTDELAY_CHOICE in MainFrame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTDELAY_CHOICE in MainFrame. 
}

bool MainFrame::SelectByData( wxChoice* p_ctrl, int val) {
	for( unsigned int i= 0; i< p_ctrl->GetCount(); i++) {
		if( ((IntClientData* )p_ctrl->GetClientObject( i))->GetVal()== val) {
			p_ctrl->SetSelection( i);
			return true;
		}
	}
	return false;
}


