/////////////////////////////////////////////////////////////////////////////
// Name:        mainframe.h
// Purpose:     
// Author:      NDA
// Modified by: 
// Created:     09/04/07 14:18:40
// RCS-ID:      $Id: mainframe.h,v 1.2 2009/03/02 09:00:13 Colombini Exp $
// Copyright:   CAEN S.p.A All rights reserved.
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 09/04/07 14:18:40

#ifndef _MAINFRAME_H_
#define _MAINFRAME_H_

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma interface "mainframe.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/frame.h"
#include "wx/statline.h"
#include "wx/spinctrl.h"
#include "wx/toolbar.h"
#include "wx/statusbr.h"
////@end includes


#include "appsettings.h"

/*!
 * Forward declarations
 */

////@begin forward declarations
class wxBoxSizer;
class wxSpinCtrl;
class wxStatusBar;
////@end forward declarations

class ConfigDoc;
class wxSpinCtrlDbl;
class IntClientData;
class wxBackgroundBitmap;
/*!
 * Control identifiers
 */
#define ID_DRAWING_PANEL 30000

////@begin control identifiers
#define ID_MAIN_FRAME 10000
#define SYMBOL_MAINFRAME_STYLE wxCAPTION|wxSYSTEM_MENU|wxMAXIMIZE|wxMINIMIZE_BOX|wxCLOSE_BOX
#define SYMBOL_MAINFRAME_TITLE _("CAEN PLL Config")
#define SYMBOL_MAINFRAME_IDNAME ID_MAIN_FRAME
#define SYMBOL_MAINFRAME_SIZE wxSize(900, 520)
#define SYMBOL_MAINFRAME_POSITION wxDefaultPosition
#define ID_PLL_SETTINGS_SCROLLEDWINDOW 10009
#define ID_PLLSET_BOARD_TYPE_CHOICE 10034
#define ID_PLLSET_BOARD_BASE_ADDR_TEXTCTRL 10024
#define ID_PLLSET_CLKMOD_RADIOBOX 10004
#define ID_PLLSET_CLKIN_SPINCTRL 10003
#define ID_PLLSET_CLKIN_LABEL 10014
#define ID_PLLSET_VCXO_TYPE_CHOICE 10008
#define ID_PLLSET_READ_VCXO_TYPE_BUTTON 10022
#define ID_PLLSET_ADCFREQ_CHOICE 10005
#define ID_PLLSET_CLKOUTEN_CHECKBOX 10006
#define ID_PLLSET_CLKOUTFREQ_CHOICE 10013
#define ID_PLLSET_CLKOUTDELAYEN_CHECKBOX 10019
#define ID_PLLSET_CLKOUTDELAY_CHOICE 10023
#define ID_MAIN_TOOLBAR 10001
#define ID_EXIT_TOOL 10010
#define ID_OPEN_TOOL 10018
#define ID_SAVE_TOOL 10041
#define ID_MAKE_OUTPUT_TOOL 10011
#define ID_DOWNLOAD_TOOL 10017
#define ID_HELP_TOOL 10032
#define ID_MAIN_STATUSBAR 10002
////@end control identifiers

#define ID_SCOPE_VERT_TOP_SPLITTERWINDOW		20000
#define ID_SCOPE_VERT_BOTTOM_SPLITTERWINDOW		20001
#define ID_PLLSET_CLKIN_DBLSPINCTRL				20002

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

/*!
 * MainFrame class declaration
 */

class MainFrame: public wxFrame
{    
    DECLARE_CLASS( MainFrame )
    DECLARE_EVENT_TABLE()

public:

    /// Constructors
    MainFrame( );
    MainFrame( wxWindow* parent, wxWindowID id = SYMBOL_MAINFRAME_IDNAME, const wxString& caption = SYMBOL_MAINFRAME_TITLE, const wxPoint& pos = SYMBOL_MAINFRAME_POSITION, const wxSize& size = SYMBOL_MAINFRAME_SIZE, long style = SYMBOL_MAINFRAME_STYLE);
	~MainFrame( );

    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_MAINFRAME_IDNAME, const wxString& caption = SYMBOL_MAINFRAME_TITLE, const wxPoint& pos = SYMBOL_MAINFRAME_POSITION, const wxSize& size = SYMBOL_MAINFRAME_SIZE, long style = SYMBOL_MAINFRAME_STYLE);

    /// Creates the controls and sizers
    void CreateControls();

	static wxString GetExecutablePath( void);

////@begin MainFrame event handler declarations

    /// wxEVT_CLOSE_WINDOW event handler for ID_MAIN_FRAME
    void OnCloseWindow( wxCloseEvent& event );

    /// wxEVT_SIZE event handler for ID_MAIN_FRAME
    void OnSize( wxSizeEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_BOARD_TYPE_CHOICE
    void OnPllsetBoardTypeChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_RADIOBOX_SELECTED event handler for ID_PLLSET_CLKMOD_RADIOBOX
    void OnPllsetClkmodRadioboxSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_PLLSET_CLKIN_SPINCTRL
    void OnPllsetClkinSpinctrlUpdated( wxSpinEvent& event );

    /// wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PLLSET_CLKIN_SPINCTRL
    void OnPllsetClkinSpinctrlTextUpdated( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_VCXO_TYPE_CHOICE
    void OnPllsetVcxoTypeChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_PLLSET_READ_VCXO_TYPE_BUTTON
    void OnPllsetReadVcxoTypeButtonClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_ADCFREQ_CHOICE
    void OnPllsetAdcfreqChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_PLLSET_CLKOUTEN_CHECKBOX
    void OnPllsetClkoutenCheckboxClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTFREQ_CHOICE
    void OnPllsetClkoutfreqChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHECKBOX_CLICKED event handler for ID_PLLSET_CLKOUTDELAYEN_CHECKBOX
    void OnPllsetClkoutdelayenCheckboxClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_PLLSET_CLKOUTDELAY_CHOICE
    void OnPllsetClkoutdelayChoiceSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_EXIT_TOOL
    void OnExitToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_OPEN_TOOL
    void OnOpenToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_SAVE_TOOL
    void OnSaveToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_MAKE_OUTPUT_TOOL
    void OnMakeOutputToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_DOWNLOAD_TOOL
    void OnDownloadToolClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for ID_HELP_TOOL
    void OnHelpToolClick( wxCommandEvent& event );

////@end MainFrame event handler declarations

    /// wxEVT_COMMAND_SPINCTRL_UPDATED event handler for ID_PLLSET_CLKIN_DBLSPINCTRL
    void OnPllsetClkinDblSpinctrlUpdated( wxSpinEvent& event );
    /// wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PLLSET_CLKIN_DBLSPINCTRL
    void OnPllsetClkinDblSpinctrlTextUpdated( wxCommandEvent& event );
    
////@begin MainFrame member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end MainFrame member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

////@begin MainFrame member variables
    wxScrolledWindow* m_pll_settings_panel;
    wxChoice* m_pllset_board_type_control;
    wxTextCtrl* m_pllset_board_base_addr_control;
    wxRadioBox* m_pllset_clkmod_control;
    wxBoxSizer* m_pllset_clkin_sizer;
    wxSpinCtrl* m_pllset_clkin_control;
    wxStaticText* m_pllset_clkin_label;
    wxChoice* m_pllset_vcxo_type_control;
    wxButton* m_pllset_read_vcxo_type_control;
    wxChoice* m_pllset_adcfreq_choice;
    wxCheckBox* m_pllset_clkouten_control;
    wxChoice* m_pllset_clkoutfreq_choice;
    wxCheckBox* m_pllset_clkoutdelayen_control;
    wxChoice* m_pllset_clkoutdelay_choice;
    wxToolBar* m_main_toolbar;
    wxStatusBar* m_main_statusbar;
////@end MainFrame member variables
    wxSpinCtrlDbl* m_pllset_clkin_dblcontrol;
	static bool SetStsBarText( const wxString& text, int pane_index);
protected:
	AppSettings *m_app_settings;
	bool UpdateControls( void);
	static wxStatusBar *g_main_statusbar;
	ConfigDoc *m_loaded_doc;
	bool SetControls();
	bool GetControls();
	bool DoLoadConfig();
	bool DoSaveConfig();
	bool MakeDownloadFile();
	bool DownloadFile();
	void UpdateOutput();
	void SetDirty( bool value);

	bool m_updating;

	void UpdateVCXOTypes( void);
	static bool SelectByData( wxChoice* p_ctrl, int val);

};

class IntClientData: public wxClientData
{    
public:
	IntClientData( int val) {
		this->m_val= val;
	}
	int GetVal( void) const {
		return this->m_val;
	}
protected:
	int m_val;
};

#endif
    // _MAINFRAME_H_
